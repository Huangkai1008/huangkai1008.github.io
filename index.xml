<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Huanghuang's Blog</title><link>https://huangkai1008.github.io/</link><description>Recent content on Huanghuang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 19 Feb 2022 11:13:32 +0800</lastBuildDate><atom:link href="https://huangkai1008.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>数据模型与查询语言</title><link>https://huangkai1008.github.io/p/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</link><pubDate>Sat, 19 Feb 2022 11:13:32 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</guid><description>&lt;h1 id="数据模型与查询语言">数据模型与查询语言&lt;/h1>
&lt;h2 id="数据模型">数据模型&lt;/h2>
&lt;p>多数应用使用层层叠加的数据模型来构建，例如：&lt;/p>
&lt;ol>
&lt;li>作为应用开发人员，观察现实世界（其中包括人员、组织、货物、行为、资金流向、传感器等），并通过对象或数据结构，以及操控那些数据结构的 API 来进行建模。这些结构通常是特定于该应用程序。&lt;/li>
&lt;li>当需要存储那些数据结构时，可以利用通用数据模型来表示它们，如 JSON 或 XML 文档、关系数据库中的表或图模型。&lt;/li>
&lt;li>数据库软件的工程师决定如何以内存、磁盘或网络上的字节来表示 JSON / XML/ 关系 / 图数据。数据表示需要支持多种方式的查询、搜索、操作和处理。&lt;/li>
&lt;li>在更低的层次上，硬件工程师则需要考虑用电流、光脉冲、磁场或者其他东西来表示字节的方法。&lt;/li>
&lt;/ol>
&lt;p>复杂的应用程序可能会有更多的中间层，但是基本思想相同：&lt;strong>每层都通过提供一个简洁的数据模型来隐藏下层的复杂性。&lt;/strong>&lt;/p>
&lt;h3 id="关系模型与文档模型">关系模型与文档模型&lt;/h3>
&lt;h4 id="数据模型的演变">数据模型的演变&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>层次模型（&lt;code>hieranchical model&lt;/code>）&lt;/strong>：将所有数据表示为嵌套在记录中的记录树，和 JSON 结构有一些类似。在20世纪70年代 IBM 公司的信息管理系统（IMS）中使用。&lt;/li>
&lt;li>&lt;strong>网状模型（&lt;code>network model&lt;/code>）&lt;/strong>：网状模型由一个称为数据系统语言会议（CODASYL）的委员会进行了标准化，并被数个不同的数据库厂商实现。它也被称为 CODASYL 模型，CODASYL 模型是层次模型的推广。&lt;/li>
&lt;li>&lt;strong>关系模型（&lt;code>relational model&lt;/code>）&lt;/strong>：数据被组织成 &lt;strong>关系&lt;/strong>，其中每个关系是 &lt;strong>元组&lt;/strong>的无序集合。SQL 基于关系模型，其中 SQL 中的&lt;strong>表&lt;/strong>对应关系模型中的关系，&lt;strong>行&lt;/strong>对应关系模型中的元组。&lt;/li>
&lt;li>&lt;strong>文档模型（&lt;code>document-oriented model&lt;/code>）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>图模型（&lt;code>graphical model&lt;/code>）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>图模型（&lt;code>graphical model&lt;/code>）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="对象-关系不匹配">对象-关系不匹配&lt;/h4>
&lt;p>应用层的数据模型和 SQL 数据模型中存在差异，需要一个转换层，模型之间的不连贯有时被称为 &lt;strong>阻抗不匹配（&lt;code>impedance mismatch&lt;/code>）&lt;/strong> ，&lt;strong>对象-关系映射（&lt;code>ORM，object-relational mapping&lt;/code>）&lt;/strong> 框架可以减少转换层的工作量，但是无法完全隐藏两个模型之间的差异。一般来说，&lt;strong>文档模型可以减少应用程序代码和存储层之间的阻抗不匹配&lt;/strong>，具有更好的 &lt;strong>局部性（&lt;code>locality&lt;/code>）&lt;/strong>&lt;/p>
&lt;p>对于一个像简历这样自包含文档的数据结构而言，JSON 表示是非常合适的。&lt;/p>
&lt;p>例：用 JSON 文档表示一个 LinkedIn 简介&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">251&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;first_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;last_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Gates&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;summary&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Co-chair of the Bill &amp;amp; Melinda Gates... Active blogger.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;region_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;us:91&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;industry_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">131&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;photo_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/p/7/000/253/05b/308dd6e.jpg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;positions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;job_title&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Co-chair&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;organization&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Bill &amp;amp; Melinda Gates Foundation&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;job_title&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Co-founder, Chairman&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;organization&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Microsoft&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;education&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;school_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Harvard University&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;start&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1973&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;end&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1975&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;school_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Lakeside School, Seattle&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;start&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;end&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;contact_info&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;blog&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://thegatesnotes.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;twitter&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://twitter.com/BillGates&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="多对一与多对多的关系">多对一与多对多的关系&lt;/h4>
&lt;p>对于关系数据库，由于支持联结操作，可以很方便地通过 ID 来引用其他表中的行。而在文档数据库中，一对多的树结构不需要联结，对于联结的支持通常也很弱。&lt;/p>
&lt;p>在表示多对一和多对多的关系时，关系数据库和文档数据库并没有根本的不同：在这两种情况下，相关项目都被一个唯一的标识符引用，这个标识符在关系模型中被称为 &lt;strong>外键&lt;/strong>，在文档模型中称为 &lt;strong>文档引用&lt;/strong>。&lt;/p>
&lt;h4 id="关系数据库与文档数据库的对比">关系数据库与文档数据库的对比&lt;/h4>
&lt;h5 id="适合的场景">适合的场景&lt;/h5>
&lt;p>如果应用数据具有类似文档的结构（即一对多关系树，通常一次性加载整个树），这种场景下适合使用文档模型。&lt;/p>
&lt;p>对于使用多对多关系或者高度关联的数据，关系模型可以胜任此场景，但是图模型是最适合的。&lt;/p>
&lt;h5 id="模式灵活性">模式灵活性&lt;/h5>
&lt;p>文档数据库有时称为 &lt;strong>无模式（&lt;code>schemaless&lt;/code>）&lt;/strong> ，更精确的术语应该是 &lt;strong>读时模式（&lt;code>schema-on-read&lt;/code>，数据的结构是隐式的，只有在读取时才解释）&lt;/strong>，与 &lt;strong>写时模式（&lt;code>schema-on-write&lt;/code>，关系数据库的一种传统方法，模式是显式的，并且数据库确保数据写入时都必需遵循）&lt;/strong> 相对应。&lt;/p>
&lt;h5 id="查询的数据局部性">查询的数据局部性&lt;/h5>
&lt;p>如果应用程序需要频繁访问整个文档，那么存储局部性会带来性能优势。如果将数据分割到多个表中，则需要进行多次索引查找才能将其全部检索出来，这可能需要更多的磁盘查找并花费更多的时间。&lt;/p>
&lt;p>局部性仅仅适用于同时需要文档绝大部分内容的情况。&lt;/p>
&lt;h3 id="图数据模型">图数据模型&lt;/h3>
&lt;p>图由两种对象组成：&lt;strong>顶点（&lt;code>vertex&lt;/code>，也称为节点（&lt;code>node&lt;/code>）/ 实体（&lt;code>entity&lt;/code>））&lt;/strong> 和 &lt;strong>边（&lt;code>edge&lt;/code>，也称为关系(&lt;code>relationship&lt;/code>) / 弧（&lt;code>arc&lt;/code>））&lt;/strong>。&lt;/p>
&lt;p>很多数据可以建模为图，图很适合用来处理大量多对多关系的场景，典型的例子包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>社交网络&lt;/p>
&lt;p>顶点是人，边指示哪些人彼此认识。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>web 图&lt;/p>
&lt;p>顶点是网页，边表示与其他页面的 HTML 链接。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>公路或铁路网&lt;/p>
&lt;p>顶点是交叉路口，边表示它们之间的公路或铁路线路&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>可以将很多著名的算法运用到这些图上。例如，汽车导航系统搜索道路网络中两点之间的最短路径，PageRank 可以计算 web 图上网页的流行度，从而确定搜索排名。&lt;/p>
&lt;p>另外·，图并不局限于以上提到的同构数据，图也提供了单个数据存储区中保存完全不同类型对象的一致性方式。&lt;/p>
&lt;h4 id="属性图">属性图&lt;/h4>
&lt;p>在 **属性图模型（&lt;code>property graph&lt;/code>）**中，&lt;/p>
&lt;p>每个顶点包括：&lt;/p>
&lt;ul>
&lt;li>唯一的标识符&lt;/li>
&lt;li>出边的集合（&lt;code>outgoing edges&lt;/code>）&lt;/li>
&lt;li>入边的集合（&lt;code>ingoing edges&lt;/code>）&lt;/li>
&lt;li>属性的集合（键值对）&lt;/li>
&lt;/ul>
&lt;p>每个边包括：&lt;/p>
&lt;ul>
&lt;li>唯一的标识符&lt;/li>
&lt;li>边的起点（尾部顶点，&lt;code>tail vertex&lt;/code>）&lt;/li>
&lt;li>边的终点（头部顶点，&lt;code>head vertex&lt;/code>）&lt;/li>
&lt;li>描述两个顶点间关系类型的标签&lt;/li>
&lt;li>属性的集合（键值对）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>使用属性图构建的数据库有 &lt;code>Neo4j&lt;/code>、&lt;code>Titan&lt;/code>、&lt;code>InfiniteGraph&lt;/code> 等。&lt;/strong>&lt;/p>
&lt;h3 id="三元存储模型">三元存储模型&lt;/h3>
&lt;p>在 &lt;strong>三元存储（&lt;code>triple-store&lt;/code>）&lt;/strong> 中，所有信息都以非常简单的三部分形式存储：&lt;strong>主语、谓语、宾语&lt;/strong>。&lt;/p>
&lt;p>三元组的主语相当于图中的一个顶点。而宾语包括以下两种：&lt;/p>
&lt;ol>
&lt;li>原始数据类型中的值，例如字符串和数字。在这种情况下，三元组的谓语和宾语相当于主语顶点上的属性的键和值。&lt;/li>
&lt;li>图中的另一个顶点。此时，谓语是图中的边，主语是尾部顶点，宾语是头部顶点。&lt;/li>
&lt;/ol>
&lt;h3 id="混合持久化">混合持久化&lt;/h3>
&lt;p>不同的应用程序有不同的需求，某个用例的最佳技术选择未必适合另一个用例。因此，在可预见的将来，关系数据库可能会继续与各种非关系数据库一起使用 - 这种思路有时也被称为 &lt;strong>混合持久化（&lt;code>polyglot persistence&lt;/code>）&lt;/strong>。&lt;/p>
&lt;h2 id="数据查询语言">数据查询语言&lt;/h2>
&lt;h3 id="命令式与声明式">命令式与声明式&lt;/h3>
&lt;p>命令式语言告诉计算机以特定顺序执行某些操作；&lt;/p>
&lt;p>声明式查询语言只需指定所需的数据模式，结果需满足什么条件，以及如何转换数据（例如，排序、分组和聚合），而不需指明如何实现这一目标。数据库系统的查询优化器会决定采用哪些索引和联结，以及用何种顺序来执行查询的各个语句。&lt;/p>
&lt;p>声明式查询语言比命令式 API 更加简洁易用，更重要的是，&lt;strong>它还隐藏了数据库引擎的实现细节，这使得数据库系统可以在无需对查询做任何更改的情况下提高性能。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>声明式语言对于并行执行更加友好。&lt;/strong>&lt;/p>
&lt;p>例如查询动物物种列表中的鲨鱼这个场景：&lt;/p>
&lt;p>javascript 的写法是这样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getSharks&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sharks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">animals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">animals&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">family&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;Sharks&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">sharks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">animals&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">sharks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关系代数的写法是这样的：
$$
sharks = σ_{family = &amp;ldquo;sharks&amp;rdquo;}(animals)
$$
SQL 的写法是这样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">animals&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">family&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;sharks&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="mapreduce-查询">MapReduce 查询&lt;/h3>
&lt;blockquote>
&lt;p>MapReduce 是一种编程模型，用于在多台机器上批量处理大规模的数据。&lt;/p>
&lt;/blockquote>
&lt;p>MapReduce 既不是一个声明式的查询语言，也不是一个完全命令式的查询 API。&lt;/p></description></item><item><title>可靠、可扩展与可维护的应用系统</title><link>https://huangkai1008.github.io/p/%E5%8F%AF%E9%9D%A0%E5%8F%AF%E6%89%A9%E5%B1%95%E4%B8%8E%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/</link><pubDate>Sun, 13 Feb 2022 11:13:32 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E5%8F%AF%E9%9D%A0%E5%8F%AF%E6%89%A9%E5%B1%95%E4%B8%8E%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/</guid><description>&lt;h1 id="可靠可扩展与可维护的应用系统">可靠、可扩展与可维护的应用系统&lt;/h1>
&lt;h2 id="数据密集型应用">数据密集型应用&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>数据密集型应用（&lt;code>Data-Intensive Application&lt;/code>)&lt;/strong> 的制约因素通常是“数据”，包括数据的规模、数据的复杂度或者数据产生与变化的速率；&lt;strong>计算密集型应用（&lt;code>Compute-Intensive&lt;/code>）&lt;/strong> 的瓶颈通常在CPU。&lt;/p>
&lt;/blockquote>
&lt;h3 id="数据系统">数据系统&lt;/h3>
&lt;p>数据密集型应用通常也是基于标准模块构建而成，每个模块负责单一的常用功能，这些模块都属于 &lt;strong>数据处理系统（&lt;code>data systems&lt;/code>）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>数据库（&lt;code>databases&lt;/code>）&lt;/strong> ：存储数据，使得应用可以再次访问&lt;/li>
&lt;li>&lt;strong>高速缓存（&lt;code>caches&lt;/code>)&lt;/strong> ：缓存复杂或操作代价昂贵的结果，以加快下一次访问&lt;/li>
&lt;li>&lt;strong>索引（&lt;code>search indexes&lt;/code>）&lt;/strong> ： 用户可以按关键字搜索数据并支持各种过滤方式&lt;/li>
&lt;li>&lt;strong>流处理（&lt;code>stream processing&lt;/code>）&lt;/strong> ：持续发送消息到另一个进程，处理采用异步的方式&lt;/li>
&lt;li>&lt;strong>批处理（&lt;code>batch processing&lt;/code>）&lt;/strong> ：定期处理大量的累积数据&lt;/li>
&lt;/ul>
&lt;p>数据系统之间的界限正在变得模糊，例如 Redis 既可以用于数据存储也可以用于消息队列，Kafka 作为消息队列也具备持久化存储保证。&lt;/p>
&lt;p>其次，越来越多的应用程序需求广泛，单个工具不足以满足所有的数据处理和存储需求。因此需要将任务分解，每个组件负责高效完成其中一部分，多个组件依靠应用层代码驱动有机衔接起来。&lt;/p>
&lt;p>下图1-1展示了一种数据系统架构：&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20220213102553.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20220213102553.png"
loading="lazy"
alt="图1-1 一种数据系统架构">
&lt;/a>
&lt;figcaption>图1-1 一种数据系统架构&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="目标">目标&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>可靠性（&lt;code>Reliability&lt;/code>）&lt;/strong> ： 当出现意外情况如硬件、软件故障、人为失误等，系统应可以继续正常运转并确保功能的正确性&lt;/li>
&lt;li>&lt;strong>可扩展性（&lt;code>Scalability&lt;/code>）&lt;/strong>：也被称为可伸缩性，随着规模的增长，例如数据量、流量或复杂性，系统应以合理的方式来匹配这种增长&lt;/li>
&lt;li>&lt;strong>可维护性（&lt;code>Maintainability&lt;/code>）&lt;/strong>：许多新的人员在不同的生命周期参与到系统开发或者运维，系统都可以合理工作（系统会保持现有行为，并适应新的应用场景）&lt;/li>
&lt;/ul>
&lt;h2 id="可靠性">可靠性&lt;/h2>
&lt;h3 id="可靠的定义">可靠的定义&lt;/h3>
&lt;ul>
&lt;li>应用程序执行用户所期望的功能&lt;/li>
&lt;li>可以容忍用户出现不正确的软件使用方法&lt;/li>
&lt;li>性能可以应对典型场景、合理的负载压力和数据量&lt;/li>
&lt;li>系统可以防止任何未经授权的访问和滥用&lt;/li>
&lt;/ul>
&lt;p>可靠性大致意味着：即使发生了某些错误，系统仍可以继续正常工作。&lt;/p>
&lt;h3 id="故障与失效">故障与失效&lt;/h3>
&lt;p>可能出错的事情称为 &lt;strong>错误（&lt;code>faults&lt;/code>）&lt;/strong> 或故障，系统可以应对错误的特性称为 &lt;strong>容错（&lt;code>tolerant&lt;/code>）&lt;/strong> 或 &lt;strong>弹性（&lt;code>resilient&lt;/code>）&lt;/strong> 。&lt;/p>
&lt;p>故障与 &lt;strong>失效（&lt;code>failure&lt;/code>）&lt;/strong> 不完全一致。故障通常被定义为组件偏离正常规格，失效意味着系统作为一个整体停止，无法向用户提供所需的服务。故障不太可能降低到零，因此通常设计容错机制避免从故障引发系统失效。比较重要的事情是&lt;strong>如何在不可靠组件基础上构建可靠性系统&lt;/strong>。&lt;/p>
&lt;h4 id="硬件故障hardware-faults">硬件故障（&lt;code>hardware faults&lt;/code>）&lt;/h4>
&lt;p>在机器足够多的情况，硬件故障的情况迟早会发生。&lt;/p>
&lt;p>对于硬件故障的场景，一般采用两种思路去减少系统故障率：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>为硬件添加冗余，可以减少单台机器完全失效的概率：&lt;/p>
&lt;p>磁盘配置RAID，服务器配备双电源，热插拔CPU，数据中心添加备用电源、发电机等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>增加软件容错的方式&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="软件故障">软件故障&lt;/h4>
&lt;ul>
&lt;li>接受特定的错误输入，便导致所有应用服务器实例崩溃的 BUG&lt;/li>
&lt;li>失控进程会用尽一些共享资源，包括 CPU 时间、内存、磁盘空间或网络带宽&lt;/li>
&lt;li>系统依赖的服务变慢，没有响应，或者开始返回错误的响应&lt;/li>
&lt;li>级联故障，一个组件中的小故障触发另一个组件中的故障，进而触发更多的故障&lt;/li>
&lt;/ul>
&lt;h4 id="人为失误">人为失误&lt;/h4>
&lt;p>应对的方法有：&lt;/p>
&lt;ul>
&lt;li>以最小化出错的方式设计系统，例如精心设计的抽象层、API 和管理后台&lt;/li>
&lt;li>分离出最容易出错的地方、容易引发故障的接口，提供一个功能齐全但非生产用的沙箱环境&lt;/li>
&lt;li>充分测试，包括单元测试到全系统集成测试以及手动测试&lt;/li>
&lt;li>提供快速的回滚恢复机制&lt;/li>
&lt;li>设置详细而清晰的监控子系统，包括性能指标和错误率&lt;/li>
&lt;li>推动管理流程并加以培训&lt;/li>
&lt;/ul>
&lt;h2 id="可扩展性">可扩展性&lt;/h2>
&lt;p>&lt;strong>可扩展性&lt;/strong> 是用来描述系统应对负载增长能力的术语。&lt;/p>
&lt;h3 id="负载的定义">负载的定义&lt;/h3>
&lt;p>负载可以用一些称为 &lt;strong>负载参数（&lt;code>load parameters&lt;/code>）&lt;/strong> 的数字来描述。参数的最佳选择取决于系统架构，它可能是 Web 服务器的每秒请求处理次数、数据库中写入的比例、同时活跃的用户数量、缓存命中率等。有时平均值很重要，有时系统瓶颈来自于少数峰值。&lt;/p>
&lt;h3 id="性能的定义">性能的定义&lt;/h3>
&lt;p>在系统负载变化的情况下，一般需要从两个方面考虑性能：&lt;/p>
&lt;ol>
&lt;li>负载增加，但系统资源（CPU、内存、网络带宽等）保持不变，系统性能会发生什么变化&lt;/li>
&lt;li>负载增加，如果需要保持性能不变，需要增加多少系统资源&lt;/li>
&lt;/ol>
&lt;p>对于系统性能的定义，不同类型的系统考虑的角度有很大差异：&lt;/p>
&lt;p>对于Hadoop这样的批处理系统，我们通常关心 &lt;strong>吞吐量（&lt;code>throughput&lt;/code>）&lt;/strong>，即每秒可处理的记录条数，或者在特定规模数据集上运行作业的总时间 ；而在线系统通常更看重服务的 &lt;strong>响应时间（&lt;code>response time&lt;/code>）&lt;/strong>，即客户端从发送请求到接收响应之前的间隔。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>延迟（&lt;code>latency&lt;/code>）&lt;/strong> 和 &lt;strong>响应时间（&lt;code>response time&lt;/code>）&lt;/strong> 的不同：&lt;/p>
&lt;p>响应时间通常指的是客户端看到的，除了&lt;strong>处理请求时间（服务时间，&lt;code>service time&lt;/code>）&lt;/strong> 外，还包括网络延迟和排队延迟；延迟是指某个请求等待处理的持续时长，在此期间它处于 &lt;strong>休眠（&lt;code>latent&lt;/code>）&lt;/strong> 状态，并等待服务返回结果。&lt;/p>
&lt;/blockquote>
&lt;h4 id="响应时间的性能指标">响应时间的性能指标&lt;/h4>
&lt;p>即使不断重复发送相同的请求，每次得到的响应时间也都会有所不同，所以需要将响应时间视为一个可以测量的数值 &lt;strong>分布（&lt;code>distribution&lt;/code>）&lt;/strong>，而不是单个数值。&lt;/p>
&lt;p>相比 &lt;strong>算数平均值（&lt;code>arithmetic mean&lt;/code>）&lt;/strong> 而言，用&lt;strong>百分位点（&lt;code>percentiles&lt;/code>）&lt;/strong> 这个指标去得到 &lt;strong>典型（&lt;code>typical&lt;/code>）&lt;/strong> 的响应时间更好。&lt;/p>
&lt;p>例如第 95、99 和 99.9 百分位点（缩写为 p95，p99 和 p999）。它们意味着 95%、99% 或 99.9% 的请求响应时间要比该阈值快，例如：如果第 95 百分位点响应时间是 1.5 秒，则意味着 100 个请求中的 95 个响应时间快于 1.5 秒，而 100 个请求中的 5 个响应时间超过 1.5 秒。&lt;/p>
&lt;p>采用较高的响应时间百分位数（&lt;code>tail latencies&lt;/code>，尾部效应或长尾效应）很重要。百分位点通常用于 &lt;strong>服务级别目标（&lt;code>SLO, service level objectives&lt;/code>）&lt;/strong> 和 &lt;strong>服务级别协议（&lt;code>SLA, service level agreements&lt;/code>）&lt;/strong>，即定义服务预期性能和可用性的合同。 SLA 可能会声明，如果服务响应时间的中位数小于 200 毫秒，且 99.9 百分位点低于 1 秒，则认为服务工作正常（如果响应时间更长，就认为服务不达标）。这些指标为客户设定了期望值，并允许客户在 SLA 未达标的情况下要求退款。&lt;/p>
&lt;p>&lt;strong>排队延迟（&lt;code>queueing delay&lt;/code>）&lt;/strong> 通常占了高百分位点处响应时间的很大一部分。由于服务器只能并行处理少量的事务（如受其 CPU 核数的限制），所以只要有少量缓慢的请求就能阻碍后续请求的处理，这种效应有时被称为 &lt;strong>头部阻塞（&lt;code>head-of-line blocking&lt;/code>）&lt;/strong> 。&lt;strong>当一个请求需要多个后端请求时，单个后端慢请求就会拖慢整个终端用户的请求&lt;/strong>&lt;/p>
&lt;h3 id="如何应对负载增加">如何应对负载增加&lt;/h3>
&lt;p>通常来说，针对特定级别负载而设计的架构不太可能应付超出预设目标10倍的实际负载，因此当目标服务处于快速增长阶段，需要认真考虑每增加一个数量级的负载，架构如何重新设计。&lt;/p>
&lt;h4 id="垂直扩展和水平扩展">垂直扩展和水平扩展&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>垂直扩展（&lt;code>scaling up&lt;/code>，&lt;code>vertical scaling&lt;/code>）&lt;/strong>：升级到更强大的机器&lt;/li>
&lt;li>&lt;strong>水平扩展（&lt;code>scaling out&lt;/code>，&lt;code>horizental scaling&lt;/code>）&lt;/strong> ：将负载分布到多个更小的机器，跨多台机器分配负载也被称为 &lt;strong>无共享（&lt;code>shared-nothing&lt;/code>）&lt;/strong> 架构。&lt;/li>
&lt;/ul>
&lt;p>现实世界中的优秀架构需要将这两种方法务实地结合。&lt;/p>
&lt;h4 id="自动扩展与手动扩展">自动扩展与手动扩展&lt;/h4>
&lt;p>有些系统是 &lt;strong>弹性（&lt;code>elastic&lt;/code>）&lt;/strong> 的，这意味着可以在检测到负载增加时自动增加计算资源，而其他系统则是手动扩展 （人工分析容量并决定向系统添加更多的机器）。如果负载极难预测，则弹性系统可能很有用，但手动扩展系统更简单，并且意外操作可能会更少。&lt;/p>
&lt;h4 id="分布式扩展">分布式扩展&lt;/h4>
&lt;p>跨多台机器部署 &lt;strong>无状态服务（&lt;code>stateless services&lt;/code>）&lt;/strong> 非常简单，但将带状态的数据系统从单节点变为分布式配置则可能引入许多额外复杂度。出于这个原因，常识告诉我们应该将数据库放在单个节点上（采用垂直扩展策略），直到高扩展性或者高可用性的需求迫使其不得不改成分布式。&lt;/p>
&lt;h2 id="可维护性">可维护性&lt;/h2>
&lt;p>可维护性一般关注软件系统的三个设计原则：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>可操作性（&lt;code>Operability&lt;/code>）&lt;/strong>：便于运维团队保持系统平稳运行&lt;/li>
&lt;li>&lt;strong>简单性（&lt;code>Simplicity&lt;/code>）&lt;/strong> ：从系统中消除尽可能多的 &lt;strong>复杂度（&lt;code>complexity&lt;/code>）&lt;/strong>，使新工程师也能轻松理解系统（注意这和用户接口的简单性不一样）&lt;/li>
&lt;li>&lt;strong>可演化性（&lt;code>evolvability&lt;/code>）&lt;/strong> ：使工程师在未来能轻松地对系统进行更改，当需求变化时为新应用场景做适配。也称为 &lt;strong>可伸缩性（&lt;code>extensibility&lt;/code>）&lt;/strong> 、&lt;strong>可修改性（&lt;code>modifiability&lt;/code>）&lt;/strong> 或 &lt;strong>可塑性（&lt;code>plasticity&lt;/code>）&lt;/strong>&lt;/li>
&lt;/ul></description></item><item><title>计算机导论 数据抽象</title><link>https://huangkai1008.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AF%BC%E8%AE%BA-%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/</link><pubDate>Tue, 08 Feb 2022 11:13:32 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AF%BC%E8%AE%BA-%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/</guid><description>&lt;h1 id="数据抽象">数据抽象&lt;/h1>
&lt;h2 id="数据抽象的必要性">数据抽象的必要性&lt;/h2>
&lt;p>程序中的许多数据都是 &lt;strong>复合（&lt;code>compound&lt;/code>）&lt;/strong> 值 ，例如：&lt;/p>
&lt;ul>
&lt;li>日期：由年月日组成&lt;/li>
&lt;li>经纬度：由经度和纬度组成&lt;/li>
&lt;/ul>
&lt;p>数据抽象可以让我们将复合的值作为一个整体操作，不需要关注复合值的具体组成细节；&lt;/p>
&lt;p>数据抽象使程序更容易设计、维护和修改。&lt;/p>
&lt;blockquote>
&lt;p>将程序中处理数据表示方式的部分与处理数据处理方式的部分隔离开来的通用技术是一种强大的设计方法，称为 &lt;strong>数据抽象&lt;/strong>（&lt;code>data abstraction&lt;/code>） 。&lt;/p>
&lt;/blockquote>
&lt;p>数据抽象在性质上与功能抽象相似。当我们创建一个函数抽象时，一个函数如何实现的细节可以被隐藏，特定函数本身可以被具有相同整体行为的任何其他函数替换。&lt;/p>
&lt;p>换句话说，我们可以做一个抽象，将函数的使用方式与函数实现的细节分开。类似地，数据抽象也可以将复合数据值的使用方式与其构建方式的细节隔离开来。&lt;/p>
&lt;h2 id="数据抽象的实例">数据抽象的实例&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>rational(n, d)&lt;/code> 返回具有分子&lt;code>n&lt;/code>和分母&lt;code>d&lt;/code>的有理数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">fractions&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">gcd&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">rational&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gcd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>numer(x)&lt;/code> 返回有理数&lt;code>x&lt;/code>的分子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">numer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>denom(x)&lt;/code> 返回有理数&lt;code>x&lt;/code>的分母&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">denom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>add_rationals(x, y)&lt;/code> 实现两个有理数间的加法操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">add_rationals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">nx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">numer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ny&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">numer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">rational&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nx&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dy&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">ny&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dy&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>mul_rationals(x, y)&lt;/code> 实现两个有理数间的乘法操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">mul_rationals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">rational&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">numer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>print_rationals(x)&lt;/code> 打印有理数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">print_rationals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>rationals_are_equal(x, y)&lt;/code> 判断两个有理数是否相等&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">rationals_are_equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">numer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">numer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="数据抽象的屏障">数据抽象的屏障&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">抽象层&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;th style="text-align:center">示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">原始表示（&lt;code>Primitive Representation&lt;/code>）&lt;/td>
&lt;td style="text-align:center">使用语言内建的数据结构和选择符为数据抽象实现选择器和构造器&lt;/td>
&lt;td style="text-align:center">[n, d] , x[0]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">数据抽象（&lt;code>Data Abstraction&lt;/code>）&lt;/td>
&lt;td style="text-align:center">数据抽象的选择器和构造器&lt;/td>
&lt;td style="text-align:center">rational, numer, denom&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">用户程序（&lt;code>User Program&lt;/code>）&lt;/td>
&lt;td style="text-align:center">用户计算程序的实现函数&lt;/td>
&lt;td style="text-align:center">add_rational, mul_rational, rationals_are_equal, print_rational&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这些函数由更高抽象级别调用较低抽象级别实现。&lt;/p>
&lt;p>当程序的某个部分可以使用较高层次的函数而转而使用较低层次的函数时，就会发生 &lt;strong>抽象屏障违规（&lt;code>abstraction barrier violation&lt;/code>）&lt;/strong>。&lt;/p>
&lt;h2 id="树的抽象实现">树的抽象实现&lt;/h2>
&lt;h3 id="树的描述">树的描述&lt;/h3>
&lt;h4 id="树的递归描述">树的递归描述&lt;/h4>
&lt;ul>
&lt;li>一棵树有一个 &lt;strong>根标签（&lt;code>root label&lt;/code>）&lt;/strong> 和 &lt;strong>分支（&lt;code>branch&lt;/code>）&lt;/strong> 的列表&lt;/li>
&lt;li>每个分支自身也是一棵树&lt;/li>
&lt;li>一棵没有分支的树被称为 &lt;strong>叶子（&lt;code>leaf&lt;/code>）&lt;/strong>&lt;/li>
&lt;li>一棵树从根开始&lt;/li>
&lt;/ul>
&lt;h4 id="树的相对描述">树的相对描述&lt;/h4>
&lt;ul>
&lt;li>树中的每个元素称为一个 &lt;strong>节点（&lt;code>node&lt;/code>）&lt;/strong>&lt;/li>
&lt;li>每个节点都有一个 &lt;strong>标签（&lt;code>label&lt;/code>）&lt;/strong> ，标签可以是任何值&lt;/li>
&lt;li>一个节点可以是另一个节点的父节点/孩子节点&lt;/li>
&lt;li>顶部节点是&lt;strong>根节点(&lt;code>root node&lt;/code>)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="树的实现">树的实现&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root_label&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">branches&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">branch&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">branches&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">assert&lt;/span> &lt;span class="n">is_tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">branch&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;branches must be trees&amp;#39;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">root_label&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">branches&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tree&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">branches&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tree&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">is_tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tree&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">list&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tree&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">branch&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">branches&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">is_tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">branch&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">is_leaf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">branches&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tree&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="树的应用">树的应用&lt;/h3>
&lt;h4 id="斐波那契树">斐波那契树&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">fib_tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">left&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fib_tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">fib_tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">fib_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fib_n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="分区树">分区树&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">partition_tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">partition_tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">partition_tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="可变性">可变性&lt;/h2>
&lt;h3 id="对象">对象&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>对象（&lt;code>object&lt;/code>）&lt;/strong> 是一组数据和 &lt;strong>行为（&lt;code>behavior&lt;/code>）&lt;/strong> 的集合，&lt;/p>
&lt;p>一种类型的对象称为 &lt;strong>类（&lt;code>class&lt;/code>）&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>Python 中的每个值都是一个对象&lt;/p>
&lt;ul>
&lt;li>所有对象都有属性&lt;/li>
&lt;li>对象通常有关联的方法&lt;/li>
&lt;/ul></description></item><item><title>计算机导论 函数抽象</title><link>https://huangkai1008.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AF%BC%E8%AE%BA-%E5%87%BD%E6%95%B0%E6%8A%BD%E8%B1%A1/</link><pubDate>Sat, 05 Feb 2022 13:35:54 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AF%BC%E8%AE%BA-%E5%87%BD%E6%95%B0%E6%8A%BD%E8%B1%A1/</guid><description>&lt;h1 id="函数抽象">函数抽象&lt;/h1>
&lt;h2 id="编程的要素">编程的要素&lt;/h2>
&lt;p>每个具有描述力的强大的编程语言一般都有这三种机制：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原始的表达式（&lt;code>expression&lt;/code>）和语句（&lt;code>statement&lt;/code>）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>组合（&lt;code>combination&lt;/code>）的方式&lt;/strong>&lt;/li>
&lt;li>&lt;strong>抽象（&lt;code>abstraction&lt;/code>）的手段&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="表达式">表达式&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>表达式&lt;/strong> 是用于描述计算过程并得出值的公式。&lt;/p>
&lt;/blockquote>
&lt;h4 id="表达式的定义">表达式的定义&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>表达式可以通过 &lt;strong>操作符（&lt;code>operator&lt;/code>）&lt;/strong> 定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="mi">18&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">69&lt;/span>
&lt;span class="mi">2&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>也可以通过 &lt;strong>函数调用(&lt;code>function call&lt;/code>)&lt;/strong> 的方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="表达式的调用">表达式的调用&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="n">add&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="mi">18&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="mi">69&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="o">----------&lt;/span> &lt;span class="o">---------&lt;/span> &lt;span class="o">---------&lt;/span>
&lt;span class="n">Operator&lt;/span> &lt;span class="n">Operand&lt;/span> &lt;span class="n">Operand&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>评估操作符&lt;/li>
&lt;li>评估操作数&lt;/li>
&lt;li>将运算符（函数）应用于计算后的操作数（参数）&lt;/li>
&lt;/ol>
&lt;p>操作符和操作数都属于表达式，所以都需要先计算出值。&lt;/p>
&lt;h3 id="程序program">程序（&lt;code>program&lt;/code>)&lt;/h3>
&lt;ul>
&lt;li>程序通过操作值工作&lt;/li>
&lt;li>程序中的表达式求值
&lt;ul>
&lt;li>表达式: &lt;code>'a' + 'hoy'&lt;/code>&lt;/li>
&lt;li>值：&lt;code>ahoy&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="值value">值（&lt;code>value&lt;/code>）&lt;/h3>
&lt;blockquote>
&lt;p>程序操作值，每个值都有自己确定的&lt;strong>类型（&lt;code>data type&lt;/code>）&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="命名name">命名（&lt;code>name&lt;/code>）&lt;/h3>
&lt;p>名称可以绑定（&lt;code>bind&lt;/code>）到值，一种绑定的方法是使用 &lt;strong>赋值语句（&lt;code>assignment statement&lt;/code>）&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">7&lt;/span>
&lt;span class="o">-------&lt;/span> &lt;span class="o">-------&lt;/span>
&lt;span class="n">Name&lt;/span> &lt;span class="n">Value&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>值可以是任意的表达式。&lt;/p>
&lt;h4 id="命名规范">命名规范&lt;/h4>
&lt;p>名称应该传达它们所绑定的值的含义或目的。函数名称通常传达它们的效果、行为或者返回值。&lt;/p>
&lt;p>如果名称代表通用量，则名称可以很短：计数、任意函数、数学运算的参数等。&lt;/p>
&lt;ul>
&lt;li>&lt;code>n&lt;/code>, &lt;code>k&lt;/code>, &lt;code>i&lt;/code>- 通常是整数&lt;/li>
&lt;li>&lt;code>x&lt;/code>, &lt;code>y&lt;/code>, &lt;code>z&lt;/code>- 通常是实数或坐标&lt;/li>
&lt;li>&lt;code>f&lt;/code>, &lt;code>g&lt;/code>, &lt;code>h&lt;/code>- 通常是函数&lt;/li>
&lt;/ul>
&lt;h2 id="函数">函数&lt;/h2>
&lt;blockquote>
&lt;p>函数是执行特定任务并且可以轻松复用的代码段，
函数使用 &lt;strong>参数(&lt;code>argument&lt;/code>)&lt;/strong> 作为输入，将 &lt;strong>返回值（&lt;code>return value&lt;/code>）&lt;/strong> 作为输出，
函数提供了编程语言功能抽象的实现。&lt;/p>
&lt;/blockquote>
&lt;h3 id="纯函数和副作用">纯函数和副作用&lt;/h3>
&lt;h4 id="副作用">副作用&lt;/h4>
&lt;blockquote>
&lt;p>&lt;strong>副作用(&lt;code>side effect&lt;/code>)&lt;/strong> 是指调用一个函数时，除了返回一个值之外，还做了其他一些额外的工作。&lt;/p>
&lt;/blockquote>
&lt;p>比较常见的副作用有打印到控制台：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="纯函数">纯函数&lt;/h4>
&lt;p>&lt;strong>纯函数（&lt;code>pure function&lt;/code>）&lt;/strong> 只返回值，不含有任何副作用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>非纯函数（&lt;code>non-pure function&lt;/code>）&lt;/strong> 含有副作用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="函数的描述">函数的描述&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Returns the square of X.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于以上的函数有：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">概念&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;th style="text-align:center">示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">定义域(&lt;code>domain&lt;/code>)&lt;/td>
&lt;td style="text-align:center">可能作为参数的所有输入的集合&lt;/td>
&lt;td style="text-align:center">&lt;code>x&lt;/code>是一个数字&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">值域（&lt;code>range&lt;/code>）&lt;/td>
&lt;td style="text-align:center">可能返回的值的所有输出的集合&lt;/td>
&lt;td style="text-align:center">&lt;code>square&lt;/code>返回一个非负实数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">表现（&lt;code>behavior&lt;/code>）&lt;/td>
&lt;td style="text-align:center">纯函数的表现是它在输入和输出之间建立的关系&lt;/td>
&lt;td style="text-align:center">&lt;code>square&lt;/code>返回&lt;code>x&lt;/code>的平方&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="函数的抽象">函数的抽象&lt;/h3>
&lt;ul>
&lt;li>按照 &lt;strong>参数化（&lt;code>parameterization&lt;/code>）&lt;/strong> 抽象&lt;/li>
&lt;li>按照 &lt;strong>规范（&lt;code>specification&lt;/code>）&lt;/strong> 抽象&lt;/li>
&lt;/ul>
&lt;h3 id="函数的设计">函数的设计&lt;/h3>
&lt;ul>
&lt;li>每个函数只做一个工作，这个工作可以用一个简短的名称来识别，并且可以在一行文本中进行表征&lt;/li>
&lt;li>拒绝重复定义（Don&amp;rsquo;t repect yourself, DRY）&lt;/li>
&lt;li>函数需要通用定义，函数的设计需要适应同一功能下可能发生的各种情况&lt;/li>
&lt;/ul>
&lt;h4 id="函数定义文档">函数定义文档&lt;/h4>
&lt;p>函数的定义通常包括描述函数的文档，此文档一般被称为 &lt;strong>docstring&lt;/strong>。&lt;/p>
&lt;p>以下的函数示例可以作为参考：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">pressure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Compute the pressure in pascals of an ideal gas.
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Applies the ideal gas law: http://en.wikipedia.org/wiki/Ideal_gas_law
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> v: volume of gas, in cubic meters
&lt;/span>&lt;span class="s2"> t: absolute temperature in degrees kelvin
&lt;/span>&lt;span class="s2"> n: particles of gas
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.38e-23&lt;/span> &lt;span class="c1"># Boltzmann&amp;#39;s constant&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">v&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以通过&lt;code>help(pressure)&lt;/code>查看此文档。&lt;/p>
&lt;p>更多参考信息可以查看如下链接：&lt;/p>
&lt;p>&lt;a class="link" href="https://www.python.org/dev/peps/pep-0257/" target="_blank" rel="noopener"
>docstring guidelines&lt;/a>&lt;/p>
&lt;h3 id="高阶函数">高阶函数&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>高阶函数（&lt;code>higher-order function&lt;/code>）&lt;/strong> 的特征是：&lt;/p>
&lt;ul>
&lt;li>接受另一个函数作为参数&lt;/li>
&lt;li>将函数作为返回值&lt;/li>
&lt;/ul>
&lt;p>除此之外的函数都被称为 &lt;strong>一阶函数（&lt;code>first-order function&lt;/code>）&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h4 id="柯里化">柯里化&lt;/h4>
&lt;blockquote>
&lt;p>用高阶函数将一个接受多个参数的函数转换为一个函数链，每个函数接受一个参数。更具体地说，给定一个函数&lt;code>f(x, y)&lt;/code>，我们可以定义一个函数&lt;code>g&lt;/code>使得&lt;code>g(x)(y)&lt;/code>等价于&lt;code>f(x, y)&lt;/code>。这里，&lt;code>g&lt;/code>是一个高阶函数，它接受单个参数&lt;code>x&lt;/code>并返回另一个接受单个参数&lt;code>y&lt;/code>的函数。这种转换称为&lt;strong>柯里化（&lt;code>curry&lt;/code>）&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>以下为一个柯里化的示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">curried_pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">h&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">h&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">curried_pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="mi">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="递归函数">递归函数&lt;/h3>
&lt;blockquote>
&lt;p>如果函数体直接或间接调用函数本身，则函数称为 &lt;strong>递归（&lt;code>recursive&lt;/code>）&lt;/strong> 函数。&lt;/p>
&lt;/blockquote>
&lt;h4 id="递归函数的通用模式">递归函数的通用模式&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>基线条件（&lt;code>base case&lt;/code>）&lt;/strong> ：在没有递归调用的情况下进行计算（最小的子问题）&lt;/li>
&lt;li>&lt;strong>递归条件（&lt;code>recusive case&lt;/code>）&lt;/strong> : 通过递归调用进行计算（进一步分解问题）&lt;/li>
&lt;li>判断是否是符合基线条件的 &lt;strong>条件语句（&lt;code>conditional statement&lt;/code>）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">sum_digits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># BASE CASE&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># RECURSIVE CASE&lt;/span>
&lt;span class="n">all_but_last&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="n">last&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">sum_digits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">all_but_last&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">last&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="相互递归">相互递归&lt;/h4>
&lt;blockquote>
&lt;p>当一个递归过程被划分为两个相互调用的函数时，这些函数被称为 &lt;strong>相互递归（&lt;code>mutually recursive&lt;/code>）&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">is_even&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">is_odd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">is_odd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">is_even&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="树递归">树递归&lt;/h4>
&lt;blockquote>
&lt;p>&lt;strong>树递归（&lt;code>tree recursion&lt;/code>）&lt;/strong> 中一个函数会多次调用自身。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">count_partitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Count the ways to partition n using parts up to m.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">count_partitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">count_partitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>HTTP/2</title><link>https://huangkai1008.github.io/p/http/2/</link><pubDate>Fri, 10 Jul 2020 15:51:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/http/2/</guid><description>&lt;h1 id="http2">HTTP/2&lt;/h1>
&lt;h2 id="一概述">一、概述&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>HTTP/2&lt;/strong> 的主要目标是通过支持完整的请求与响应复用来减少延迟，通过有效压缩 HTTP 标头字段将协议开销降至最低，同时增加对请求优先级和服务器推送的支持。 为达成这些目标，HTTP/2 还给我们带来了大量其他协议层面的辅助实现，例如新的流控制、错误处理和升级机制。&lt;/p>
&lt;/blockquote>
&lt;p>为了实现 HTTP 工作组设定的性能目标，&lt;strong>HTTP/2&lt;/strong> 引入了一个新的二进制分帧层，&lt;strong>该层无法与之前的 HTTP/1.x 服务器和客户端向后兼容&lt;/strong>，因此协议的主版本提升到 &lt;strong>HTTP/2&lt;/strong>。&lt;/p>
&lt;h2 id="二http1x的缺陷">二、HTTP/1.x的缺陷&lt;/h2>
&lt;p>&lt;strong>HTTP/1.x&lt;/strong> 实现简单是以牺牲性能为代价的：&lt;/p>
&lt;ul>
&lt;li>客户端需要使用多个连接才能实现并发和缩短延迟&lt;/li>
&lt;li>不会压缩请求和响应首部，从而导致不必要的网络流量&lt;/li>
&lt;li>不支持有效的资源优先级，致使底层 TCP 连接的利用率低下&lt;/li>
&lt;/ul>
&lt;h2 id="三二进制分帧层">三、二进制分帧层&lt;/h2>
&lt;p>&lt;strong>HTTP/2&lt;/strong> 所有性能增强的核心在于新的&lt;strong>二进制分帧层（&lt;code>Binary framing layer&lt;/code>）&lt;/strong>，它定义了如何封装 HTTP 消息并在客户端与服务器之间传输。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211123115225.svg" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211123115225.svg"
loading="lazy"
alt="二进制分帧层">
&lt;/a>
&lt;figcaption>二进制分帧层&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>这里所谓的“层”，指的是位于套接字接口与应用可见的高级 HTTP API 之间一个经过优化的新编码机制: HTTP 的语义（包括各种动词、方法、标头）都不受影响，不同的是传输期间对它们的编码方式变了。 HTTP/1.x 协议以换行符作为纯文本的分隔符，而 HTTP/2 将所有传输的信息分割为更小的消息和帧，并采用二进制格式对它们编码。&lt;/p>
&lt;p>这样一来，客户端和服务器为了相互理解，都必须使用新的二进制编码机制: HTTP/1.x 客户端无法理解只支持 HTTP/2 的服务器，反之亦然。 现有的应用不必担心这些变化，因为客户端和服务器会替我们完成必要的分帧工作。&lt;/p>
&lt;h3 id="数据流消息和帧">数据流、消息和帧&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>数据流（&lt;code>Stream&lt;/code>）&lt;/strong>：已建立的连接内的双向字节流，可以承载一条或多条消息。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>消息（&lt;code>Message&lt;/code>)&lt;/strong>：与逻辑请求或响应消息对应的完整的一系列帧&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>帧（&lt;code>Frame&lt;/code>）&lt;/strong>：HTTP/2 通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流&lt;/p>
&lt;/blockquote>
&lt;p>所有通信都在一个 TCP 连接上完成，此连接可以承载任意数量的双向数据流：&lt;/p>
&lt;ul>
&lt;li>每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息。&lt;/li>
&lt;li>每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧。&lt;/li>
&lt;li>帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载等等。 来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211123143327.svg" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211123143327.svg"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>HTTP/2&lt;/strong> 将 HTTP 协议通信分解为二进制编码帧的交换，这些帧对应着特定数据流中的消息。所有这些都在一个 TCP 连接内复用。&lt;/p>
&lt;h2 id="四请求与响应复用">四、请求与响应复用&lt;/h2>
&lt;p>在 &lt;strong>HTTP/1.x&lt;/strong> 中，如果客户端要想发起多个并行请求以提升性能，则必须使用多个 TCP 连接。 这是 &lt;strong>HTTP/1.x&lt;/strong> 交付模型的直接结果，该模型可以保证每个连接每次只交付一个响应（响应排队）。 更糟糕的是，这种模型也会导致&lt;strong>队首阻塞&lt;/strong>，从而造成底层 TCP 连接的效率低下。&lt;/p>
&lt;p>&lt;strong>HTTP/2&lt;/strong> 中新的二进制分帧层突破了这些限制，实现了&lt;strong>完整的请求和响应复用&lt;/strong>: 客户端和服务器可以将 HTTP 消息分解为互不依赖的帧，然后交错发送，最后再在另一端把它们重新组装起来。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211123170352.svg" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211123170352.svg"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>HTTP/2&lt;/strong> 中的新二进制分帧层解决了 HTTP/1.x 中存在的队首阻塞问题，也消除了并行处理和发送请求及响应时对多个连接的依赖。 结果，应用速度更快、开发更简单、部署成本更低。&lt;/p>
&lt;h2 id="五服务器推送">五、服务器推送&lt;/h2>
&lt;p>&lt;strong>HTTP/2&lt;/strong> 新增的另一个强大的新功能是，服务器可以对一个客户端请求发送多个响应。 换句话说，除了对最初请求的响应外，服务器还可以向客户端推送额外资源，而无需客户端明确地请求。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211123170731.svg" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211123170731.svg"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="六标头压缩">六、标头压缩&lt;/h2>
&lt;p>&lt;strong>HTTP/2&lt;/strong> 使用 &lt;strong>HPACK&lt;/strong> 压缩格式压缩请求和响应标头元数据。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211123170928.svg" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211123170928.svg"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn" target="_blank" rel="noopener"
>HTTP/2简介&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>应用层</title><link>https://huangkai1008.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82/</link><pubDate>Thu, 25 Jun 2020 22:20:45 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82/</guid><description>&lt;h2 id="一概述">一、概述&lt;/h2>
&lt;p>应用层包括大多数应用程序使用的协议，用于通过较低级别的协议建立的网络连接提供用户服务或交换应用程序数据。&lt;/p>
&lt;h3 id="网络应用程序体系结构">网络应用程序体系结构&lt;/h3>
&lt;h4 id="客户-服务器体系结构">客户-服务器体系结构&lt;/h4>
&lt;blockquote>
&lt;p>存在总是打开的主机称为&lt;strong>服务器（&lt;code>server&lt;/code>）&lt;/strong>，服务于其他来自&lt;strong>客户（&lt;code>client&lt;/code>）&lt;strong>主机的请求，此种模式称为&lt;/strong>客户-服务器体系结构（&lt;code>client-server architecture&lt;/code>）&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h5 id="特征">特征&lt;/h5>
&lt;ul>
&lt;li>客户相互之间不直接通信&lt;/li>
&lt;li>服务器具有固定的、周知的地址（IP 地址）&lt;/li>
&lt;li>&lt;strong>数据中心（&lt;code>data center&lt;/code>）&lt;/strong> 用于扩展&lt;/li>
&lt;/ul>
&lt;h5 id="示例">示例&lt;/h5>
&lt;ul>
&lt;li>web 应用程序&lt;/li>
&lt;/ul>
&lt;h4 id="p2p体系结构">P2P体系结构&lt;/h4>
&lt;blockquote>
&lt;p>以对等方式进行通信，并不区分客户端和服务端，而是平等关系进行通信。在对等方式下，可以把每个相连的主机当成既是服务端又是客户端，可以互相下载对方的共享文件。此种模式称为端到端体系结构（&lt;code>peer-to-peer architecture, P2P architecture&lt;/code>）&lt;/p>
&lt;/blockquote>
&lt;h5 id="特征-1">特征&lt;/h5>
&lt;ul>
&lt;li>任意端系统直接通信&lt;/li>
&lt;li>对等点从其他对等点请求服务，向其他对等点提供服务&lt;/li>
&lt;li>&lt;strong>自扩展性（&lt;code>self-scalability&lt;/code>）&lt;/strong>：例如在 P2P 文件共享场景下，尽管每个对等方都由于请求文件产生工作负载，但每个对等方通过向其他对等方分发文件也为文件共享系统增加服务能力&lt;/li>
&lt;/ul>
&lt;h5 id="示例-1">示例&lt;/h5>
&lt;ul>
&lt;li>文件共享（BitTorrent）&lt;/li>
&lt;li>对等方协助下载加速器（迅雷）&lt;/li>
&lt;li>因特网电话和视频应用（Skype）&lt;/li>
&lt;/ul>
&lt;h3 id="进程通信">进程通信&lt;/h3>
&lt;p>在不同端系统上的&lt;strong>进程（&lt;code>process&lt;/code>）&lt;/strong>，通过跨越计算机网络发送&lt;strong>报文（&lt;code>message&lt;/code>）&lt;/strong>&lt;/p>
&lt;h4 id="客户与服务器进程">客户与服务器进程&lt;/h4>
&lt;blockquote>
&lt;p>在一对进程之间的通信会话场景中，发起通信（即在该会话开始时发起与其他进程的联系）的进程被标识为&lt;strong>客户&lt;/strong>，在会话开始时等待被联系的进程是&lt;strong>服务器&lt;/strong>进程&lt;/p>
&lt;/blockquote>
&lt;p>对于 web 而言，浏览器是一个客户进程，Web 服务器是一个服务器进程；&lt;/p>
&lt;p>对于 P2P 文件共享，下载文件的对等方标识为客户，上载文件的对等方标识为服务器。&lt;/p>
&lt;h4 id="进程与计算机网络间的接口">进程与计算机网络间的接口&lt;/h4>
&lt;p>进程通过&lt;strong>套接字&lt;/strong>向网络发送报文和从网络接收报文。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>套接字（&lt;code>socket&lt;/code>）&lt;/strong> 是同一台主机内应用层与运输层之间的接口。由于该套接字是建立网络应用的可编程接口，因此套接字也称为应用程序和网络之间的&lt;strong>应用程序编程接口（Application Programming Interface, API）&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>应用程序开发者可以控制套接字在应用层端的一切，但是对该套接字的运输层端控制仅限于：&lt;/p>
&lt;ol>
&lt;li>选择运输层协议&lt;/li>
&lt;li>设定运输层一些参数，比如最大缓存和最大报文段长度等&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>应用程序建立在选择的运输层协议提供的运输层服务之上。&lt;/strong>&lt;/p>
&lt;h4 id="进程寻址">进程寻址&lt;/h4>
&lt;p>为了标识接收进程，需要定义两种信息：&lt;/p>
&lt;ol>
&lt;li>主机的地址（IP地址）&lt;/li>
&lt;li>在目的主机中指定接收进程的标识符（端口号）&lt;/li>
&lt;/ol>
&lt;h3 id="运输服务要求">运输服务要求&lt;/h3>
&lt;h4 id="可靠数据传输">可靠数据传输&lt;/h4>
&lt;blockquote>
&lt;p>如果一个协议确保由应用程序的一端发送的数据正确、完全地交付给该应用程序的另一端，那么就认为此协议提供了&lt;strong>可靠数据传输（&lt;code>reliable data transfer&lt;/code>）&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>当运输层协议不能提供可靠数据传输时，此协议可能能被&lt;strong>容忍丢失的应用（&lt;code>loss-tolerant application&lt;/code>）&lt;/strong> 所接受。&lt;/p>
&lt;h4 id="吞吐量">吞吐量&lt;/h4>
&lt;p>运输层协议能够以某种特定的速率提供确保的可用吞吐量。使用此类服务，应用程序能够请求 r 比特/秒的确保吞吐量，并且该运输协议能够确保可用吞吐量总是为至少 r 比特/秒。&lt;/p>
&lt;p>具有吞吐量要求的应用程序被称为&lt;strong>带宽敏感的应用（&lt;code>bandwidth-sensitive application&lt;/code>）&lt;/strong>，例如许多当前的多媒体应用；&lt;/p>
&lt;p>相反地，可以根据当时可用带宽利用可供使用吞吐量的应用被称为&lt;strong>弹性应用（&lt;code>elastic application&lt;/code>）&lt;/strong>，例如电子邮件、文件传输应用。&lt;/p>
&lt;h4 id="定时">定时&lt;/h4>
&lt;p>运输层协议也能提供定时保证。这种服务对于实时性的应用十分有吸引力，比如因特网电话、多方游戏和虚拟互动环境等。&lt;/p>
&lt;h4 id="安全性">安全性&lt;/h4>
&lt;p>运输层协议可以提供机密性、数据完整性和端点鉴别等安全性服务。&lt;/p>
&lt;h2 id="二应用层协议">二、应用层协议&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>应用层协议（&lt;code>application layer protocol&lt;/code>）&lt;/strong> 定义了运行在不同端系统上的应用程序进程如何相互传递报文&lt;/p>
&lt;/blockquote>
&lt;p>具体定义内容为：&lt;/p>
&lt;ul>
&lt;li>交换的报文类型&lt;/li>
&lt;li>报文类型的语法&lt;/li>
&lt;li>字段的语义&lt;/li>
&lt;li>确定一个进程何时以及如何发送报文，对报文进行响应的规则&lt;/li>
&lt;/ul>
&lt;h3 id="web-与-httphttpmd">Web 与 &lt;a class="link" href="HTTP.md" >HTTP&lt;/a>&lt;/h3>
&lt;h3 id="电子邮件系统">电子邮件系统&lt;/h3>
&lt;p>&lt;strong>因特网电子邮件系统（&lt;code>email&lt;/code>）&lt;/strong> 有三个主要组成部分：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>用户代理(&lt;code>user agent&lt;/code>)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>邮件服务器（&lt;code>mail server&lt;/code>）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>简单邮件传输协议（&lt;code>Simple Mail Transfer Protocol, SMTP&lt;/code>）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="smtp">SMTP&lt;/h4>
&lt;blockquote>
&lt;p>&lt;strong>&lt;code>SMTP&lt;/code>&lt;/strong> 用于从发送方的邮件服务器发送报文到接收方的邮件服务器，&lt;strong>SMTP 使用 TCP 作为它的支撑运输协议&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>SMTP&lt;/code>有两个部分：&lt;/p>
&lt;ol>
&lt;li>运行在发送方邮件服务器的客户端&lt;/li>
&lt;li>运行在接收方邮件服务器的服务端&lt;/li>
&lt;/ol>
&lt;p>每台邮件服务器同时运行 SMTP 的客户端也运行 SMTP 的服务端，根据邮件服务器的表现是发送/接收邮件决定它是 SMTP 的 客户端/服务端。&lt;/p>
&lt;h4 id="邮件访问协议">邮件访问协议&lt;/h4>
&lt;p>与 &lt;code>HTTP&lt;/code> 不同的是，&lt;code>HTTP&lt;/code>是一个&lt;strong>拉协议（&lt;code>pull protocol&lt;/code>）&lt;/strong>， &lt;code>SMTP&lt;/code> 是一个&lt;strong>推协议(&lt;code>push protocol&lt;/code>)&lt;/strong>，&lt;strong>为了从邮件服务器上获取邮件到客户端，需要引入邮件访问协议&lt;/strong>，当前比较流行的邮件访问协议有：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>第三版的邮局协议（&lt;code>Post Office Protocol--Version 3, POP3&lt;/code>）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>因特网邮件访问协议（&lt;code>Internet Mail Access Protocol, IMAP&lt;/code>）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>基于 Web 的电子邮件（&lt;code>HTTP&lt;/code>）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="dns域名和dnsmd-协议">&lt;a class="link" href="%e5%9f%9f%e5%90%8d%e5%92%8cDNS.md" >DNS&lt;/a> 协议&lt;/h3>
&lt;hr>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>Kurose, J. F., &amp;amp; Ross, K. W. (2018). &lt;em>计算机网络-自顶而下方法&lt;/em> (7th ed.). 机械工业出版社.&lt;/li>
&lt;/ul></description></item><item><title>IP</title><link>https://huangkai1008.github.io/p/ip/</link><pubDate>Thu, 18 Jun 2020 12:22:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/ip/</guid><description>&lt;h1 id="ip">IP&lt;/h1>
&lt;h2 id="ip地址概述">IP地址概述&lt;/h2>
&lt;blockquote>
&lt;p>**IP 地址(&lt;code>Internet Protocol address&lt;/code>)**是用于识别 IP 网络中的设备的一个唯一地址，32 个二进制位分成了 4 个八位组（1 个八位组 = 8 个二进制位）。&lt;/p>
&lt;p>每个八位组转换成了十进制并由句点（点）分隔。 因此，可以说 IP 地址是用点分十进制格式表示的（例如，172.16.81.100）。 每个八位组值的范围从 0 到 255（十进制）或从 00000000 到 11111111（二进制）。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash"> 10. 1. 23. &lt;span class="m">19&lt;/span> &lt;span class="o">(&lt;/span>decimal&lt;span class="o">)&lt;/span>
00001010.00000001.00010111.00010011 &lt;span class="o">(&lt;/span>binary&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="ip-地址编址方式">IP 地址编址方式&lt;/h2>
&lt;p>IP 地址的编址方式经历了三个历史阶段：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分类&lt;/strong>&lt;/li>
&lt;li>&lt;strong>子网划分&lt;/strong>&lt;/li>
&lt;li>&lt;strong>无分类&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="1-分类">1. 分类&lt;/h3>
&lt;hr>
&lt;p>IP地址由两部分组成，&lt;strong>网络号&lt;/strong>和&lt;strong>主机号&lt;/strong>，其中不同分类具有不同的网络号长度，并且是固定的&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>网络号&lt;/strong>(&lt;code>net-id&lt;/code>)：标志主机或路由器连接的网络，一个网络号在整个因特网内是唯一的&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>主机号&lt;/strong>(&lt;code>host-id&lt;/code>)：标志该主机（或路由器）。一个主机号在它前面的网络号所指明的网络范围内必须是唯一的&lt;/p>
&lt;/blockquote>
&lt;p>简而言之，&lt;strong>IP 地址 ::= {&amp;lt; 网络号 &amp;gt;, &amp;lt; 主机号 &amp;gt;}&lt;/strong>&lt;/p>
&lt;p>根据 IP 地址的范围，由此便划分出A、B、C三类及特殊地址D、E：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">类别&lt;/th>
&lt;th style="text-align:center">起始位&lt;/th>
&lt;th style="text-align:center">开始&lt;/th>
&lt;th style="text-align:center">结束&lt;/th>
&lt;th style="text-align:center">点分十进制掩码&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">A&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0.0.0.0&lt;/td>
&lt;td style="text-align:center">127.0.0.0&lt;/td>
&lt;td style="text-align:center">255.0.0.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">128.0.0.0&lt;/td>
&lt;td style="text-align:center">191.255.0.0&lt;/td>
&lt;td style="text-align:center">255.255.0.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">110&lt;/td>
&lt;td style="text-align:center">192.0.0.0&lt;/td>
&lt;td style="text-align:center">223.255.255.0&lt;/td>
&lt;td style="text-align:center">255.255.255.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="2-子网划分">2. 子网划分&lt;/h3>
&lt;hr>
&lt;h4 id="子网掩码">子网掩码&lt;/h4>
&lt;blockquote>
&lt;p>子网掩码(subnet mask)又叫网络掩码、地址掩码、子网络遮罩，它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。&lt;/p>
&lt;/blockquote>
&lt;p>通常情况下，子网掩码的表示方法和地址本身的表示方法是一样的。在IPv4中，就是点分十进制四组表示法（四个取值从0到255的数字由点隔开，比如255.128.0.0）或表示为一个八位十六进制数（如FF.80.00.00，它等同于255.128.0.0），后者用得较少。&lt;/p>
&lt;p>另一种更为简短的形式叫做&lt;a class="link" href="https://zh.wikipedia.org/wiki/%e6%97%a0%e7%b1%bb%e5%88%ab%e5%9f%9f%e9%97%b4%e8%b7%af%e7%94%b1" target="_blank" rel="noopener"
>无类别域间路由&lt;/a>（CIDR）表示法，它给出的是一个地址加上一个斜杠以及网络掩码的二进制表示法中“1”的位数（即网络号中和网络掩码相关的是哪些位）。例如，192.0.2.96/28表示的是一个前28位被用作网络号的IP地址（和255.255.255.240的意思一样）。&lt;/p>
&lt;p>&lt;strong>子网掩码是由32位二进制数字组成的四组数字，左边是网络位，用二进制数字1表示，1的个数等于网络位数的长度，右边是主机位，用二进制数字0表示，0的个数等于主机位的长度。&lt;/strong>&lt;/p>
&lt;p>当给定一个IP地址后，我们&lt;strong>通过相应的子网掩码即可得出该地址所在网络的网络号位数，以此判断该网络能够容纳的机器的个数（即主机号位数）&lt;/strong>。另外的一个作用就是可以通过运算判断两台机器是否处在同一子网。&lt;/p>
&lt;p>&lt;strong>特点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>与IP地址一一对应&lt;/li>
&lt;li>1和0永远是连续的，不会交叉出现&lt;/li>
&lt;li>左边永远是1，右边永远是0&lt;/li>
&lt;/ul>
&lt;h4 id="21--判断该网络能够容纳的机器的个数">2.1 判断该网络能够容纳的机器的个数&lt;/h4>
&lt;p>​ 主机号有N位，那么这个地址中，就只能有&lt;code>2 ** n − 2&lt;/code>个主机，因为其中全0作为网络地址，全1作为广播地址&lt;/p>
&lt;h5 id="22--判断两台机器是否处在同一子网网段">2.2 判断两台机器是否处在同一子网（网段）&lt;/h5>
&lt;p>​ 将IP地址与子网掩码做&lt;code>与运算&lt;/code>，如果得出的结果一样，则这两个IP地址是同一个子网当中&lt;/p>
&lt;h4 id="3广播地址broadcast-address">3.广播地址(&lt;code>Broadcast address&lt;/code>)&lt;/h4>
&lt;blockquote>
&lt;p>广播地址是专门用于同时向该网络中所有主机进行广播的一个地址。这就好像我们去收听一个广播频道，广播频道本身就是一个广播地址，播音员向这个地址去进行推送，那么只要能够收到这个频道的听众就都能够听到广播。那么这个广播的覆盖面到底有多广呢，这还是取决于我们的网络号。我们知道，一个完整的IP地址是由网络号和主机号两部分组成的，那么广播的覆盖范围就是其所在网络下的所有主机。&lt;/p>
&lt;/blockquote>
&lt;p>只要把主机号所在的二进制位全部变为1即可得到广播地址。&lt;/p>
&lt;ul>
&lt;li>局域网地址：192.168.211.32/24（斜杠后的数字代表子网掩码的二进制位数，那么主机号的位数为32-24=8），所以广播地址为：192.168.211.255&lt;/li>
&lt;/ul></description></item><item><title>计算机网络</title><link>https://huangkai1008.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link><pubDate>Wed, 17 Jun 2020 11:22:54 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid><description>&lt;h1 id="计算机网络">计算机网络&lt;/h1>
&lt;h2 id="一概述">一、概述&lt;/h2>
&lt;h3 id="互联网因特网和万维网">互联网、因特网和万维网&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>互联网(&lt;code>internet&lt;/code>)&lt;/strong>：凡是由能彼此通信的设备组成的网络就叫互联网，互联网把多种不同的网络连接起来，因此互联网是&lt;strong>网络的网络&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210928080734.gif" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210928080734.gif"
loading="lazy"
alt="互联网">
&lt;/a>
&lt;figcaption>互联网&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>&lt;strong>因特网(&lt;code>Internet&lt;/code>)&lt;/strong>：世界范围的计算机网络（&lt;code>computer network&lt;/code>）&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>万维网(&lt;code>World Wide Web, WWW&lt;/code>)&lt;/strong>：万维网是互联网的主要服务，提供网页和音视频等服务&lt;/p>
&lt;/blockquote>
&lt;h4 id="关系">关系&lt;/h4>
&lt;p>&lt;strong>互联网（广义）&amp;gt; 因特网 &amp;gt; 万维网&lt;/strong>&lt;/p>
&lt;h2 id="二因特网">二、因特网&lt;/h2>
&lt;p>&lt;strong>因特网&lt;/strong>包含了全世界数十亿计算设备，在今天，这些设备一般被称为&lt;strong>主机（&lt;code>host&lt;/code>）&lt;/strong> 或者&lt;strong>端系统（&lt;code>end system&lt;/code>）&lt;/strong>，&lt;strong>端系统&lt;/strong>通过&lt;strong>通信链路（&lt;code>communication link&lt;/code>）&lt;/strong> 和 &lt;strong>分组交换机（&lt;code>packet switch&lt;/code>）&lt;/strong> 连接到一起。&lt;/p>
&lt;h3 id="isp">ISP&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>因特网服务提供商（Internet Service Provider, ISP）&lt;/strong>，ISP 可以从互联网管理机构申请到很多 IP 地址，然后一些机构和个人从某个 ISP 获取 IP 地址的使用权，并可通过该 ISP 连接到互联网&lt;/p>
&lt;/blockquote>
&lt;p>例如中国移动、中国移动、中国电信就是有名的&lt;strong>ISP&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211018154857.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211018154857.png"
loading="lazy"
alt="ISP">
&lt;/a>
&lt;figcaption>ISP&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="协议">协议&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>协议（&lt;code>protocol&lt;/code>）&lt;/strong> 定义了在两个或者多个通信实体之间交换的报文的格式和顺序，以及报文发送和/或接收一条报文或其他事件所采取的动作&lt;/p>
&lt;/blockquote>
&lt;h3 id="接入网">接入网&lt;/h3>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211002115311.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211002115311.png"
loading="lazy"
alt="接入网">
&lt;/a>
&lt;figcaption>接入网&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="三电路交换与分组交换">三、电路交换与分组交换&lt;/h2>
&lt;p>通过网络链路和交换机移动数据有两种基本方法：&lt;strong>电路交换（&lt;code>circult switching&lt;/code>）&lt;strong>和&lt;/strong>分组交换（&lt;code>packet switching&lt;/code>）&lt;/strong>&lt;/p>
&lt;h3 id="电路交换circuit-switching">电路交换（&lt;code>circuit switching&lt;/code>）&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>电路交换&lt;/strong>需要建立一条专用的数据通信路径，这条路径上可能包含许多中间节点。这条通信路径在整个通信过程中将被独占，直到通信结束才会释放资源。&lt;strong>电路交换适合实时性要求较高的大量数据传输的情况。&lt;/strong>&lt;/p>
&lt;p>电路交换最显著的特点：&lt;strong>独占资源&lt;/strong>，最典型的电路交换：&lt;strong>传统电话网络&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h4 id="电路交换中的多路复用multiplexing">电路交换中的多路复用（&lt;code>multiplexing&lt;/code>）&lt;/h4>
&lt;blockquote>
&lt;p>物理链路的通信能力远远大于一路通信所需要的能力，可以通过&lt;strong>多路复用&lt;/strong>提高信道利用率，同时各个通信线路之间又互不影响&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>频分多路复用（&lt;code>Frequency-Division Multiplexing, FDM&lt;/code>）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>时分多路复用（&lt;code>Time-Division Multiplexing, TDM&lt;/code>）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>码分多路复用（&lt;code>Code-Division Multiplexing, CDM&lt;/code>）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>波分多路复用（&lt;code>Wavelength-Division Multiplexing, WDM&lt;/code>）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="优势">优势&lt;/h4>
&lt;ul>
&lt;li>通信延时小。通信双方通过专用线路进行通信，数据可以直达。当数据传输量较大时，优点将十分显著&lt;/li>
&lt;li>线路独占，没有冲突&lt;/li>
&lt;li>实时性强。一旦通信线路，建立，双方可以实时通信&lt;/li>
&lt;/ul>
&lt;h4 id="劣势">劣势&lt;/h4>
&lt;ul>
&lt;li>线路独占，利用率太低&lt;/li>
&lt;li>连接建立时间过长&lt;/li>
&lt;/ul>
&lt;h3 id="分组交换packet-switching">分组交换（&lt;code>packet switching&lt;/code>）&lt;/h3>
&lt;h4 id="分组">分组&lt;/h4>
&lt;p>在网络应用中，端系统彼此交换&lt;strong>报文（&lt;code>message&lt;/code>）&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>为了从源端系统向目的端系统发送一个报文，源将长报文划分为小的数据块，这些小的数据块被称为分组（&lt;code>packet&lt;/code>）&lt;/p>
&lt;/blockquote>
&lt;p>在源和目的地之间，每个分组都通过&lt;strong>通信链路（&lt;code>communication link&lt;/code>）&lt;/strong> 和 &lt;strong>分组交换机（&lt;code>packet switch&lt;/code>）&lt;/strong> 传送，分组以等于该链路最大传输速率的速度传输通过通信链路。&lt;/p>
&lt;h4 id="存储转发传输">存储转发传输&lt;/h4>
&lt;p>多数分组交换机在链路的输入端使用&lt;strong>存储转发传输&lt;/strong>机制。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>存储转发传输（&lt;code>store-and-forward transmission&lt;/code>）&lt;/strong>：交换机能够向输出链路传输该分组的第一个比特前，必须接收到整个分组&lt;/p>
&lt;/blockquote>
&lt;h4 id="优势-1">优势&lt;/h4>
&lt;ul>
&lt;li>线路利用率更高&lt;/li>
&lt;li>支持优先级传输&lt;/li>
&lt;li>可靠性高&lt;/li>
&lt;li>可以实现不同类型的数据终端设置&lt;/li>
&lt;/ul>
&lt;h4 id="劣势-1">劣势&lt;/h4>
&lt;ul>
&lt;li>存在时延问题&lt;/li>
&lt;li>分组必须携带一些控制信息需要额外的开销&lt;/li>
&lt;/ul>
&lt;h4 id="节点时延">节点时延&lt;/h4>
&lt;h5 id="处理时延nodal-processing-delay">&lt;strong>处理时延(&lt;code>nodal processing delay&lt;/code>)&lt;/strong>&lt;/h5>
&lt;blockquote>
&lt;p>交换机、路由器等网络设备在收到报文后要进行解封装分析首部、提取数据、差错检验、路由选择等处理，此类时间被称为&lt;strong>节点处理时延&lt;/strong>。一般来说，高速路由器的处理时延通常是微秒或者更低的数量级。&lt;/p>
&lt;/blockquote>
&lt;h5 id="排队时延queuing-delay">&lt;strong>排队时延（&lt;code>queuing delay&lt;/code>）&lt;/strong>&lt;/h5>
&lt;blockquote>
&lt;p>路由器或交换机等网络设备处理数据包排队所消耗的时间被称为&lt;strong>排队时延&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;h6 id="排队时延的决定因素">&lt;strong>排队时延的决定因素&lt;/strong>&lt;/h6>
&lt;ol>
&lt;li>&lt;strong>R&lt;/strong> 链路的带宽(bps)&lt;/li>
&lt;li>&lt;strong>L&lt;/strong> 数据包的大小(bits)&lt;/li>
&lt;li>&lt;strong>a&lt;/strong> 数据包的平均到达时长&lt;/li>
&lt;/ol>
&lt;h6 id="流量强度与排队时延">&lt;strong>流量强度与排队时延&lt;/strong>&lt;/h6>
&lt;blockquote>
&lt;p>假定所有分组都是L比特组成，且队列无限大，则称 La/R 为&lt;strong>流量强度 (traffic intensity)&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>La/R ~ 0：近乎为0&lt;/li>
&lt;li>La/R -&amp;gt; 1：慢慢增大&lt;/li>
&lt;li>La/R &amp;gt; 1：时延将会无穷大&lt;/li>
&lt;/ol>
&lt;p>因此：&lt;strong>设计系统时流量强度不能大于1&lt;/strong>&lt;/p>
&lt;h6 id="丢包packet-loss">&lt;strong>丢包（&lt;code>packet loss&lt;/code>）&lt;/strong>&lt;/h6>
&lt;p>实际情况下输出队列容量是有限的，当分组到达时，队列是满的，路由器将会&lt;strong>丢弃（&lt;code>drop&lt;/code>）&lt;/strong> 该分组。&lt;/p>
&lt;h5 id="传输时延transmission-delay">&lt;strong>传输时延（&lt;code>transmission delay&lt;/code>）&lt;/strong>&lt;/h5>
&lt;blockquote>
&lt;p>路由器、交换机等网络设备将所有分组的比特推向链路所需要的时间被称为&lt;strong>传输时延&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>如果用 L 比特表示分组的长度，用 R bps(b/s) 表示从路由器A到路由器B的链路传输速率，传输时延是 L/R 。&lt;/p>
&lt;p>即：
$$
d_{trans} = \frac{L}{R}
$$&lt;/p>
&lt;h5 id="传播时延propagation-delay">&lt;strong>传播时延（&lt;code>propagation delay&lt;/code>）&lt;/strong>&lt;/h5>
&lt;blockquote>
&lt;p>报文在实际的物理链路上传播数据所需要的时间被称为&lt;strong>传播时延&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>如果 d 是路由器 A 到路由器 B 之间的距离，s 是该链路之间的传播速率（传播速率取决于链路的物理媒体），传播时延是 d/s 。&lt;/p>
&lt;p>即：
$$
d_{prop} = \frac{d}{s}
$$&lt;/p>
&lt;h5 id="节点的总时延total-nodal-delay">&lt;strong>节点的总时延（&lt;code>total nodal delay&lt;/code>）&lt;/strong>&lt;/h5>
&lt;p>&lt;strong>节点的总时延&lt;/strong> 为处理时延、排队时延、传输时延和传播时延的和，即：
$$
d_{nodal} = d_{proc} + d_{queue} + d_{trans} + d_{prop}
$$&lt;/p>
&lt;h4 id="端到端时延">端到端时延&lt;/h4>
&lt;p>通过由 N 条速率均为 R 的链路组成的路径，此时在源和目的地之间有 N - 1 台路由器，从源到目的地发送一个长度为L的分组，因为&lt;a class="link" href="#%e5%ad%98%e5%82%a8%e8%bd%ac%e5%8f%91%e4%bc%a0%e8%be%93" >存储转发传输&lt;/a>机制，假设网络此时是无拥塞的，那么端到端时延是：&lt;/p>
&lt;p>$$
d_{end-end} = N(d_{proc} + \frac{L}{R} + d_{prop})
$$
或:
$$
d_{end-end} = N(d_{proc} + d_{trans} + d_{prop})
$$&lt;/p>
&lt;h4 id="traceroute">Traceroute&lt;/h4>
&lt;blockquote>
&lt;p>&lt;strong>traceroute命令用于追踪数据包在网络上的传输时的全部路径&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">traceroute -m &lt;span class="m">10&lt;/span> www.baidu.com
traceroute to www.baidu.com &lt;span class="o">(&lt;/span>183.232.231.172&lt;span class="o">)&lt;/span>, &lt;span class="m">10&lt;/span> hops max, &lt;span class="m">60&lt;/span> byte packets
&lt;span class="m">1&lt;/span> _gateway &lt;span class="o">(&lt;/span>10.0.2.2&lt;span class="o">)&lt;/span> 0.321 ms 0.249 ms 0.106 ms
&lt;span class="m">2&lt;/span> * * *
&lt;span class="m">3&lt;/span> * * *
&lt;span class="m">4&lt;/span> * * *
&lt;span class="m">5&lt;/span> * * *
&lt;span class="m">6&lt;/span> * * *
&lt;span class="m">7&lt;/span> * * *
&lt;span class="m">8&lt;/span> * * *
&lt;span class="m">9&lt;/span> * * *
&lt;span class="m">10&lt;/span> * * *
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="四性能指标">四、性能指标&lt;/h2>
&lt;p>互联网主要的性能指标有&lt;strong>速率&lt;/strong>、&lt;strong>带宽&lt;/strong>、&lt;strong>吞吐量&lt;/strong>和&lt;a class="link" href="#%e8%8a%82%e7%82%b9%e6%97%b6%e5%bb%b6" >时延&lt;/a>等。&lt;/p>
&lt;h3 id="速率">速率&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>速率（传输速率，&lt;code>transmission rate&lt;/code>）&lt;/strong> 是指计算机网络中的主机在数字信道上，单位时间内从一端传送到另一端的数据量，即数据传输率，也称数据率或比特率，单位为比特/秒（bit/s, bps）&lt;/p>
&lt;/blockquote>
&lt;p>不同的链路拥有不同的传输速率，一般讨论传输速率，往往指的是额定速率或标称速率（理想速率），此指标和物理媒体密切相关。&lt;/p>
&lt;h3 id="带宽">带宽&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>带宽（&lt;code>bandwidth&lt;/code>）&lt;/strong> 是指 计算机网络中的主机在数字信道上，单位时间内从一端传送到另一端的最大数据量，即最大速率&lt;/p>
&lt;/blockquote>
&lt;h4 id="上行带宽与下行带宽">上行带宽与下行带宽&lt;/h4>
&lt;blockquote>
&lt;p>&lt;strong>上行带宽&lt;/strong>是指用户电脑向网络发送信息时的数据传输速率，&lt;strong>下行带宽&lt;/strong>是指网络向用户电脑发送信息时的传输速率&lt;/p>
&lt;/blockquote>
&lt;h3 id="吞吐量">吞吐量&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>吞吐量（&lt;code>throughput&lt;/code>）&lt;/strong> 是指单位时间内某个信道/端口实际的数据量，可以理解为实际的带宽&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>吞吐量等于瓶颈链路的传输速率&lt;/strong>，对于n条链路，链路速率分别为R1、R2 &amp;hellip; Rn，吞吐量为：&lt;strong>min{R1, R2 &amp;hellip; Rn}&lt;/strong>&lt;/p>
&lt;h4 id="瞬时吞吐量和平均吞吐量">瞬时吞吐量和平均吞吐量&lt;/h4>
&lt;blockquote>
&lt;p>从服务器到客户机通过计算机网络传送一个大文件，任意时刻客户机接收该文件的速率叫做&lt;strong>瞬时吞吐量（&lt;code>instantaneous throughput&lt;/code>）&lt;/strong>，假设客户机接收该文件的所有 F 比特用了 T 秒，那么 F/T 就叫做&lt;strong>平均吞吐量（&lt;code>average throughput&lt;/code>）&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="五-计算机网络体系结构">五、 计算机网络体系结构&lt;/h2>
&lt;h3 id="协议分层">协议分层&lt;/h3>
&lt;blockquote>
&lt;p>网络设计者以 &lt;strong>分层（&lt;code>layer&lt;/code>）&lt;/strong> 的形式组织 &lt;strong>协议（&lt;code>protocol&lt;/code>）&lt;/strong> 以及实现这些协议的网络硬件和软件，各层的所有协议被称为&lt;strong>协议栈（&lt;code>protocol stack&lt;/code>）&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h4 id="优点">优点&lt;/h4>
&lt;ul>
&lt;li>各层之间是独立的，某一层不需要知道其下层实现&lt;/li>
&lt;li>灵活性好&lt;/li>
&lt;li>结构上可分割开&lt;/li>
&lt;li>易于实现和维护&lt;/li>
&lt;li>能促进标准化工作&lt;/li>
&lt;/ul>
&lt;h4 id="潜在缺点">潜在缺点&lt;/h4>
&lt;ul>
&lt;li>一层可能冗余较低层的功能&lt;/li>
&lt;li>某层功能可能需要仅在其他某层才出现的信息（如时间戳值），这违反了层次分离的目标&lt;/li>
&lt;/ul>
&lt;p>现在比较常见的一共有三种协议分层模型，分别为&lt;strong>OSI 分层模型&lt;/strong>、&lt;strong>五层协议模型（因特网协议栈）&lt;/strong>、&lt;strong>TCP/IP 模型&lt;/strong>。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211027205459.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211027205459.png"
loading="lazy"
alt="协议分层">
&lt;/a>
&lt;figcaption>协议分层&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="osi-模型">OSI 模型&lt;/h4>
&lt;p>&lt;strong>OSI 模型&lt;/strong>由 &lt;strong>应用层（&lt;code>application layer&lt;/code>)&lt;/strong>、&lt;strong>表示层（&lt;code>presentation layer&lt;/code>）&lt;/strong>、 &lt;strong>会话层（&lt;code>session layer&lt;/code>）&lt;/strong>、&lt;strong>运输层（&lt;code>transport layer&lt;/code>）&lt;/strong>、&lt;strong>网络层（&lt;code>internet layer&lt;/code>）&lt;/strong>、&lt;strong>链路层（&lt;code>link layer&lt;/code>）&lt;/strong>、&lt;strong>物理层 （&lt;code>physical layer&lt;/code>）&lt;/strong> 7 个层次组成。&lt;/p>
&lt;h4 id="因特网协议栈">因特网协议栈&lt;/h4>
&lt;p>&lt;strong>因特网协议栈&lt;/strong>由 &lt;strong>&lt;a class="link" href="%e5%ba%94%e7%94%a8%e5%b1%82.md" >应用层&lt;/a>（&lt;code>application layer&lt;/code>)&lt;/strong> 、&lt;strong>&lt;a class="link" href="%e8%bf%90%e8%be%93%e5%b1%82.md" >运输层&lt;/a>（&lt;code>transport layer&lt;/code>）&lt;/strong>、&lt;strong>网络层（&lt;code>internet layer&lt;/code>）&lt;/strong>、&lt;strong>链路层（&lt;code>link layer&lt;/code>）&lt;/strong>、&lt;strong>物理层 （&lt;code>physical layer&lt;/code>）&lt;/strong> 5 个层次组成。&lt;/p>
&lt;h4 id="tcpip-模型">TCP/IP 模型&lt;/h4>
&lt;p>&lt;strong>TCP/IP 模型&lt;/strong>由&lt;strong>应用层（&lt;code>application layer&lt;/code>)&lt;/strong>、&lt;strong>运输层（&lt;code>transport layer&lt;/code>）&lt;/strong>、&lt;strong>网际层（&lt;code>internet layer&lt;/code>）&lt;/strong>、&lt;strong>网络接口层 （&lt;code>network access layer&lt;/code>）&lt;/strong> 4 个层次组成。&lt;/p>
&lt;h2 id="六代理服务器">六、代理服务器&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>代理服务器（&lt;code>proxy server&lt;/code>）&lt;/strong> 是一种网络服务，允许一个终端（一般是客户端）通过这个服务与另一个终端（一般为服务端）进行非直接的连接。&lt;/p>
&lt;/blockquote>
&lt;h3 id="正向代理">正向代理&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>正向代理（&lt;code>forward proxy&lt;/code>）&lt;/strong> 是一个位于客户端和目标服务器之间的代理服务器 (中间服务器)。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特殊的配置。&lt;/p>
&lt;/blockquote>
&lt;h3 id="反向代理">反向代理&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>反向代理（&lt;code>reverse proxy&lt;/code>）&lt;/strong> 代表客户端从一个或多个服务器检索资源。然后这些资源返回给客户端，看起来好像它们来自反向代理服务器本身。主要用于负载均衡。&lt;/p>
&lt;/blockquote>
&lt;h3 id="正向代理与反向代理的区别">正向代理与反向代理的区别&lt;/h3>
&lt;p>&lt;strong>正向代理代理的对象是客户端，反向代理代理的对象是服务端。&lt;/strong>&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>Kurose, J. F., &amp;amp; Ross, K. W. (2018). &lt;em>计算机网络-自顶而下方法&lt;/em> (7th ed.). 机械工业出版社.&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/Internet_protocol_suite" target="_blank" rel="noopener"
>Wikipedia : Internet_protocol_suite&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/OSI_model" target="_blank" rel="noopener"
>Wikipedia : OSI&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>域名和DNS</title><link>https://huangkai1008.github.io/p/%E5%9F%9F%E5%90%8D%E5%92%8Cdns/</link><pubDate>Sun, 14 Jun 2020 16:02:15 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E5%9F%9F%E5%90%8D%E5%92%8Cdns/</guid><description>&lt;h2 id="一域名">一、域名&lt;/h2>
&lt;p>&lt;strong>网域名称&lt;/strong>（英语：Domain Name，简称：Domain），简称 &lt;strong>域名&lt;/strong> 、 &lt;strong>网域&lt;/strong> ，是由一串用点分隔的字符组成的互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。域名可以说是一个&lt;a class="link" href="IP.md" >IP&lt;/a>地址的代称，目的是为了便于记忆后者。&lt;/p>
&lt;h3 id="域名的层级">域名的层级&lt;/h3>
&lt;p>&lt;code>www.example.com&lt;/code> 真正的域名是 &lt;code>www.example.com.root&lt;/code> ，简写为 &lt;code>www.example.com.&lt;/code> 。因为，根域名 &lt;code>.root&lt;/code> 对于所有域名都是一样的，所以平时是省略的。&lt;/p>
&lt;p>根域名的下一级，叫做 &lt;strong>顶级域名（&lt;code>top-level domain，缩写为TLD&lt;/code>）&lt;/strong> ，比如 &lt;code>.com&lt;/code> 、 &lt;code>.net&lt;/code> ；&lt;/p>
&lt;p>再下一级叫做 &lt;strong>次级域名（&lt;code>second-level domain，缩写为SLD&lt;/code>）&lt;/strong> ，比如 &lt;code>www.example.com&lt;/code> 里面的 &lt;code>.example&lt;/code> ，这一级域名是用户可以注册的；&lt;/p>
&lt;p>再下一级是 &lt;strong>主机名（&lt;code>host&lt;/code>）&lt;/strong> ，比如 &lt;code>www.example.com&lt;/code> 里面的 &lt;code>www&lt;/code>，又称为 &lt;strong>三级域名&lt;/strong> ，这是用户在自己的域里面为服务器分配的名称，是用户可以任意分配的。&lt;/p>
&lt;blockquote>
&lt;p>主机名.次级域名.顶级域名.根域名&lt;/p>
&lt;p>host.sld.tld.root&lt;/p>
&lt;/blockquote>
&lt;p>&lt;figure
>
&lt;a href="https://gitee.com/huanghuang927/picture-host/raw/master/20211212155532.png" >
&lt;img src="https://gitee.com/huanghuang927/picture-host/raw/master/20211212155532.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="二dns">二、DNS&lt;/h2>
&lt;p>&lt;strong>域名系统&lt;/strong>（英语：&lt;strong>D&lt;/strong>omain &lt;strong>N&lt;/strong>ame &lt;strong>S&lt;/strong>ystem，缩写：&lt;strong>DNS&lt;/strong>）是一个分布式数据库，提供了&lt;strong>域名&lt;/strong>和 &lt;a class="link" href="IP.md" >IP&lt;/a>地址之间相互转换的服务。&lt;/p>
&lt;h3 id="查询过程">查询过程&lt;/h3>
&lt;p>DNS 服务器根据&lt;a class="link" href="#%e5%9f%9f%e5%90%8d%e7%9a%84%e5%b1%82%e7%ba%a7" >域名的层级&lt;/a>，进行 &lt;strong>分级查询&lt;/strong>。&lt;/p>
&lt;p>每一级域名都有自己的 &lt;strong>NS（&lt;code>Name Server&lt;/code>）&lt;/strong> 记录，NS记录指向该级域名的域名服务器。这些服务器知道下一级域名的各种记录。&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;分级查询&amp;rdquo;，就是从根域名开始，依次查询每一级域名的NS记录，直到查到最终的IP地址&lt;/p>
&lt;p>过程大致为:&lt;/p>
&lt;ol>
&lt;li>从&amp;quot;根域名服务器&amp;quot;查到&amp;quot;顶级域名服务器&amp;quot;的NS记录和A记录（IP地址）&lt;/li>
&lt;li>从&amp;quot;顶级域名服务器&amp;quot;查到&amp;quot;次级域名服务器&amp;quot;的NS记录和A记录（IP地址）&lt;/li>
&lt;li>从&amp;quot;次级域名服务器&amp;quot;查出&amp;quot;主机名&amp;quot;的IP地址&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">dig math.stackexchange.com
&lt;span class="p">;&lt;/span> &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.3-1ubuntu1.15-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; math.stackexchange.com
&lt;span class="p">;;&lt;/span> global options: +cmd
&lt;span class="p">;;&lt;/span> Got answer:
&lt;span class="p">;;&lt;/span> -&amp;gt;&amp;gt;HEADER&lt;span class="s">&amp;lt;&amp;lt;- opco&lt;/span>de: QUERY, status: NOERROR, id: &lt;span class="m">50719&lt;/span>
&lt;span class="p">;;&lt;/span> flags: qr rd ra&lt;span class="p">;&lt;/span> QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: &lt;span class="m">1&lt;/span>
&lt;span class="p">;;&lt;/span> OPT PSEUDOSECTION:
&lt;span class="p">;&lt;/span> EDNS: version: 0, flags:&lt;span class="p">;&lt;/span> udp: &lt;span class="m">65494&lt;/span>
&lt;span class="p">;;&lt;/span> QUESTION SECTION:
&lt;span class="p">;&lt;/span>math.stackexchange.com. IN A
&lt;span class="p">;;&lt;/span> ANSWER SECTION:
math.stackexchange.com. &lt;span class="m">600&lt;/span> IN A 151.101.193.69
math.stackexchange.com. &lt;span class="m">600&lt;/span> IN A 151.101.129.69
math.stackexchange.com. &lt;span class="m">600&lt;/span> IN A 151.101.65.69
math.stackexchange.com. &lt;span class="m">600&lt;/span> IN A 151.101.1.69
&lt;span class="p">;;&lt;/span> Query time: &lt;span class="m">74&lt;/span> msec
&lt;span class="p">;;&lt;/span> SERVER: 127.0.0.53#53&lt;span class="o">(&lt;/span>127.0.0.53&lt;span class="o">)&lt;/span>
&lt;span class="p">;;&lt;/span> WHEN: Mon Sep &lt;span class="m">13&lt;/span> 10:18:12 UTC &lt;span class="m">2021&lt;/span>
&lt;span class="p">;;&lt;/span> MSG SIZE rcvd: &lt;span class="m">115&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="记录类型">记录类型&lt;/h3>
&lt;p>域名与IP之间的对应关系，称为&lt;strong>记录（&lt;code>record&lt;/code>）&lt;/strong>。根据使用场景，&lt;strong>记录&lt;/strong>可以分成不同的&lt;strong>类型（&lt;code>type&lt;/code>）&lt;/strong>。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">记录类型&lt;/th>
&lt;th style="text-align:center">记录类型简称&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>地址记录（&lt;code>Address&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;code>A&lt;/code>&lt;/td>
&lt;td style="text-align:center">返回域名指向的IP地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>域名服务器记录（&lt;code>Name Server&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;code>NS&lt;/code>&lt;/td>
&lt;td style="text-align:center">返回保存下一级域名信息的服务器地址。该记录只能设置为域名，不能设置为IP地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>邮件记录（&lt;code>Mail eXchange&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;code>MX&lt;/code>&lt;/td>
&lt;td style="text-align:center">返回接收电子邮件的服务器地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>规范名称记录（&lt;code>Canonical Name&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;code>CNAME&lt;/code>&lt;/td>
&lt;td style="text-align:center">返回另一个域名，即当前查询的域名是另一个域名的跳转&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>逆向查询记录（&lt;code>Pointer Record&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;code>PTR&lt;/code>&lt;/td>
&lt;td style="text-align:center">只用于从IP地址查询域名&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="传输方式">传输方式&lt;/h3>
&lt;p>DNS 可以使用 &lt;strong>UDP&lt;/strong> 或者 &lt;strong>TCP&lt;/strong> 进行传输，&lt;strong>使用的端口号都为 53&lt;/strong>。大多数情况下 DNS 使用 UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：&lt;/p>
&lt;ul>
&lt;li>如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）&lt;/li>
&lt;li>区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）&lt;/li>
&lt;/ul>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>【日】户根勤. (2017). 网络是怎样连接的. 人民邮电出版社.&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/Domain_Name_System" target="_blank" rel="noopener"
>Wikipedia : DNS&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.ruanyifeng.com/blog/2016/06/dns.html" target="_blank" rel="noopener"
>阮一峰的网络日志: DNS 原理入门&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>HTTP</title><link>https://huangkai1008.github.io/p/http/</link><pubDate>Fri, 12 Jun 2020 12:22:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/http/</guid><description>&lt;h1 id="http">HTTP&lt;/h1>
&lt;h2 id="一概述">一、概述&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>超文本传输协议（&lt;code>HyperText Transfer Protocol, HTTP&lt;/code>）&lt;/strong> 是 Web 的核心，HTTP 由客户端程序和服务器程序实现&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>HTTP 使用 TCP 作为它的支撑运输协议&lt;/strong>，因为 HTTP 服务器并不保存关于客户的任何信息，所以 HTTP 是一个&lt;strong>无状态协议（&lt;code>stateless protocol&lt;/code>）&lt;/strong>。&lt;/p>
&lt;h3 id="请求和响应报文">请求和响应报文&lt;/h3>
&lt;p>客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。&lt;/p>
&lt;h4 id="请求消息requests">&lt;strong>请求消息（&lt;code>requests&lt;/code>）&lt;/strong>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="nf">GET&lt;/span> &lt;span class="nn">/&lt;/span> &lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span>
&lt;span class="n">Host&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">developer.mozilla.org&lt;/span>
&lt;span class="n">Accept-Language&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">fr&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;strong>起始行（&lt;code>start line&lt;/code>）&lt;/strong>：包含一个&lt;a class="link" href="#%e4%ba%8c%e3%80%81HTTP%e6%96%b9%e6%b3%95" >HTTP方法（&lt;code>method&lt;/code>）&lt;/a>、&lt;strong>请求目标（&lt;code>request target&lt;/code>）&lt;/strong> 和 &lt;strong>HTTP 版本 （&lt;code>HTTP version&lt;/code>）&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>消息头（&lt;code>headers&lt;/code>）&lt;/strong>： 整个 header（包括其值）表现为单行形式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个空行用来分隔首部和内容主体 Body&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>消息主体（&lt;code>body&lt;/code>）&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210906175921.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210906175921.png"
loading="lazy"
alt="HTTP Requests Example">
&lt;/a>
&lt;figcaption>HTTP Requests Example&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;hr>
&lt;/li>
&lt;/ul>
&lt;h4 id="响应消息responses">&lt;strong>响应消息(&lt;code>responses&lt;/code>)&lt;/strong>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span> &lt;span class="m">200&lt;/span> &lt;span class="ne">OK&lt;/span>
&lt;span class="n">Date&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">Sat, 09 Oct 2010 14:28:02 GMT&lt;/span>
&lt;span class="n">Server&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">Apache&lt;/span>
&lt;span class="n">Last-Modified&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">Tue, 01 Dec 2009 20:18:22 GMT&lt;/span>
&lt;span class="n">ETag&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">&amp;#34;51142bc1-7449-479b075b2891b&amp;#34;&lt;/span>
&lt;span class="n">Accept-Ranges&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">bytes&lt;/span>
&lt;span class="n">Content-Length&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">29769&lt;/span>
&lt;span class="n">Content-Type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">text/html&lt;/span>
&lt;span class="err">&amp;lt;&lt;/span>!DOCTYPE html... (here comes the 29769 bytes of the requested web page)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>状态行（&lt;code>status line&lt;/code>)&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>协议版本&lt;/strong>，通常为 &lt;code>HTTP/1.1&lt;/code>.&lt;/li>
&lt;li>&lt;strong>状态码 (&lt;code>status code&lt;/code>)&lt;/strong>，表明请求是成功或失败。常见的状态码是 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200" target="_blank" rel="noopener"
>&lt;code>200&lt;/code>&lt;/a>，&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404" target="_blank" rel="noopener"
>&lt;code>404&lt;/code>&lt;/a>，或 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302" target="_blank" rel="noopener"
>&lt;code>302&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;strong>状态文本 (&lt;code>status text&lt;/code>)&lt;/strong>：一个简短的，纯粹的信息，通过状态码的文本描述，帮助理解该 HTTP 消息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>消息头（&lt;code>Headers&lt;/code>）&lt;/strong>： 整个 header（包括其值）表现为单行形式&lt;/li>
&lt;li>&lt;strong>一个空行&lt;/strong>用来分隔首部和内容主体 Body&lt;/li>
&lt;li>&lt;strong>消息主体（&lt;code>body&lt;/code>）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210906205815.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210906205815.png"
loading="lazy"
alt="HTTP Responses Example">
&lt;/a>
&lt;figcaption>HTTP Responses Example&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;hr>
&lt;h2 id="二http-方法">二、HTTP 方法&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">请求方法&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;th style="text-align:center">RFC&lt;/th>
&lt;th style="text-align:center">请求具有请求实体&lt;/th>
&lt;th style="text-align:center">响应具有响应实体&lt;/th>
&lt;th style="text-align:center">安全方法&lt;/th>
&lt;th style="text-align:center">是否幂等&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>GET&lt;/strong>&lt;/td>
&lt;td style="text-align:center">请求一个指定的资源&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">可选&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>HEAD&lt;/strong>&lt;/td>
&lt;td style="text-align:center">获取报文首部，不返回报文实体主体，主要用于确认 URL 的有效性以及资源更新的日期时间等&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">可选&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>POST&lt;/strong>&lt;/td>
&lt;td style="text-align:center">用于将实体提交到指定的资源&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>PUT&lt;/strong>&lt;/td>
&lt;td style="text-align:center">向指定资源位置上传其最新内容&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>PATCH&lt;/strong>&lt;/td>
&lt;td style="text-align:center">对资源进行部分修改&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc5789" target="_blank" rel="noopener"
>5789&lt;/a>&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>DELETE&lt;/strong>&lt;/td>
&lt;td style="text-align:center">删除指定的资源&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">可选&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>CONNECT&lt;/strong>&lt;/td>
&lt;td style="text-align:center">要求在与代理服务器通信时建立隧道&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">可选&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>OPTIONS&lt;/strong>&lt;/td>
&lt;td style="text-align:center">查询指定的 URL 能够支持的方法&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">可选&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>TRACE&lt;/strong>&lt;/td>
&lt;td style="text-align:center">服务器会将通信路径返回给客户端&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="http方法的安全性">HTTP方法的安全性&lt;/h3>
&lt;p>如果说一个 HTTP 方法是&lt;strong>安全（&lt;code>safe&lt;/code>）&lt;/strong> 的，是指这是个不会修改服务器的数据的方法。也就是说，这是一个对服务器只读操作的方法。这些方法是安全的：&lt;code>GET&lt;/code>，&lt;code>HEAD&lt;/code> 和 &lt;code>OPTIONS&lt;/code>。所有安全的方法都是幂等的，但并非所有幂等方法都是安全的，例如，&lt;code>PUT&lt;/code> 和 &lt;code>DELETE&lt;/code>都是幂等的，但不是安全的。&lt;/p>
&lt;h3 id="http方法的幂等性">HTTP方法的幂等性&lt;/h3>
&lt;p>一个HTTP方法是&lt;strong>幂等（&lt;code>idempotent&lt;/code>）&lt;/strong> 的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。在正确实现的条件下， &lt;code>GET&lt;/code>， &lt;code>HEAD&lt;/code>， &lt;code>PUT&lt;/code> 和 &lt;code>DELETE&lt;/code>等方法都是&lt;strong>幂等&lt;/strong>的，而 &lt;code>POST&lt;/code>方法不是。所有的 &lt;strong>安全&lt;/strong>方法也都是幂等的。&lt;/p>
&lt;p>幂等性只与后端服务器的实际状态有关，而每一次请求接收到的状态码不一定相同。例如，第一次调用 &lt;code>DELETE&lt;/code>方法有可能返回&lt;strong>200&lt;/strong>，但是后续的请求可能会返回 &lt;strong>404&lt;/strong> 。 &lt;code>DELETE&lt;/code> 的言外之意是，开发者不应该使用 &lt;code>DELETE&lt;/code> 法实现具有删除最后条目功能的 RESTful API。&lt;/p>
&lt;p>需要注意的是，服务器不一定会确保请求方法的幂等性，有些应用可能会错误地打破幂等性约束。&lt;/p>
&lt;hr>
&lt;h2 id="三http-首部header">三、HTTP 首部（&lt;code>header&lt;/code>)&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">类型&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;th style="text-align:center">实例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>通用头（&lt;code>General headers&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">适用于请求和响应信息的头字段&lt;/td>
&lt;td style="text-align:center">&lt;code>Date&lt;/code>,&lt;code>Cache-Control&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>请求头（&lt;code>Request headers&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">用于表示请求信息的附加信息的头字段&lt;/td>
&lt;td style="text-align:center">&lt;code>Authorization&lt;/code>,&lt;code>User-Agent&lt;/code>,&lt;code>Accept-Encoding&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>响应头（&lt;code>Response headers&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">用于表示响应信息的附加信息的头字段&lt;/td>
&lt;td style="text-align:center">&lt;code>Location&lt;/code>,&lt;code>Server&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>实体头（&lt;code>Entity headers&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">用于表示实体（消息体）的附加信息的头字段&lt;/td>
&lt;td style="text-align:center">&lt;code>Allow&lt;/code>,&lt;code>Content-Encoding&lt;/code>,&lt;code>Expires&lt;/code>, &lt;code>Etag&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="四http-状态码status-code">四、HTTP 状态码（&lt;code>status code&lt;/code>）&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">状态码&lt;/th>
&lt;th style="text-align:center">含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1xx(&lt;em>informational response&lt;/em>)&lt;/td>
&lt;td style="text-align:center">告知请求的处理进度和情况&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2xx(&lt;em>successful&lt;/em>)&lt;/td>
&lt;td style="text-align:center">成功&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">3xx(&lt;em>redirection&lt;/em>)&lt;/td>
&lt;td style="text-align:center">需要进一步处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">4xx(&lt;em>client error&lt;/em>)&lt;/td>
&lt;td style="text-align:center">客户端错误&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5xx(&lt;em>server error&lt;/em>)&lt;/td>
&lt;td style="text-align:center">服务器错误&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="五连接管理">五、连接管理&lt;/h2>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211030124313.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211030124313.png"
loading="lazy"
alt="HTTP 1.X 的连接类型">
&lt;/a>
&lt;figcaption>HTTP 1.X 的连接类型&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="非持续连接和持续连接">非持续连接和持续连接&lt;/h3>
&lt;blockquote>
&lt;p>每个请求及其响应对经一个单独的 TCP 连接发送，此种方式称为使用&lt;strong>非持续连接（&lt;code>non-persistent connection&lt;/code>）&lt;/strong>，也可以称为&lt;strong>短连接&lt;/strong>；&lt;/p>
&lt;p>多个请求及其响应经过相同的TCP连接发送，此种方式称为使用&lt;strong>持续连接（&lt;code>persistent connection&lt;/code>）&lt;/strong>，也可以称为&lt;strong>长连接&lt;/strong>、&lt;strong>连接保活（&lt;code>keep alive&lt;/code>）&lt;/strong>、&lt;strong>连接复用（&lt;code>connection reuse&lt;/code>）&lt;/strong>；&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>这里的持续连接（长连接）和非持续连接（短连接）指的都是TCP连接&lt;/strong>。&lt;/p>
&lt;p>从 &lt;strong>HTTP/1.1&lt;/strong> 开始默认使用持续连接，如果要断开连接，需要由客户端或者服务器端提出断开，使用 &lt;code>Connection : close&lt;/code>；&lt;/p>
&lt;p>在 &lt;strong>HTTP/1.1&lt;/strong> 之前默认使用非持续连接的，如果需要使用持续连接，则使用 &lt;code>Connection : Keep-Alive&lt;/code>。&lt;/p>
&lt;h4 id="非持续连接的问题">非持续连接的问题&lt;/h4>
&lt;ul>
&lt;li>必须为每一个请求的对象建立和维护一个全新的连接，&lt;strong>会产生大量的开销&lt;/strong>，给 web 服务器带来严重负担&lt;/li>
&lt;li>每一个对象经受两倍 RTT（&lt;code>Round-Trip Time, RTT, 即往返时延&lt;/code>）的交付时延（一个 RTT 创建 TCP，一个RTT请求和接受一个对象），效率较低&lt;/li>
&lt;/ul>
&lt;h4 id="持续连接的问题">持续连接的问题&lt;/h4>
&lt;p>持续连接在空闲状态也消耗服务器资源，而且在重负载时，还有可能遭受 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Glossary/DOS_attack" target="_blank" rel="noopener"
>DoS&lt;/a> 攻击，对于这种情况一般采取的策略是：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>关闭一些长时间没有发生请求的连接&lt;/p>
&lt;/li>
&lt;li>
&lt;p>限制每个客户端的最大连接数，避免恶意的客户端影响服务端&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>以&lt;code>Nginx&lt;/code>为例 ：&lt;/p>
&lt;ol>
&lt;li>可以通过 &lt;code>keepalive_timeout&lt;/code> 参数设置长连接的超时时间，如果在一段时间内连接上没有任何数据收发就主动断开连接，避免空闲连接占用系统资源&lt;/li>
&lt;li>可以通过 &lt;code>keepalive_requests&lt;/code> 参数设置长连接上可发送的最大请求次数。比如设置成 1000，那么当 Nginx 在这个连接上处理了 1000 个请求后，也会主动断开连接&lt;/li>
&lt;/ol>
&lt;h2 id="六cookie-和-session">六、Cookie 和 Session&lt;/h2>
&lt;h3 id="http-cookies">HTTP Cookies&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）&lt;/strong> 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。&lt;strong>Cookie 使基于&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview#http_is_stateless_but_not_sessionless" target="_blank" rel="noopener"
>无状态&lt;/a>的 HTTP 协议记录稳定的状态信息成为了可能&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>Cookie 曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。由于服务器指定 Cookie 后，浏览器的每次请求都会携带 Cookie 数据，会带来额外的性能开销（尤其是在移动环境下）。新的浏览器API已经允许开发者直接将数据存储到本地，如使用 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API" target="_blank" rel="noopener"
>Web storage API&lt;/a> （本地存储和会话存储）或 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener"
>IndexedDB&lt;/a> 。&lt;/p>
&lt;h4 id="用途">用途&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>会话状态管理&lt;/strong>（如用户登录状态、购物车、游戏分数或其它需要记录的信息）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>个性化设置&lt;/strong>（如用户自定义设置、主题等）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>浏览器行为跟踪&lt;/strong>（如跟踪分析用户行为等）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="创建过程">创建过程&lt;/h4>
&lt;p>当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 Set-Cookie 选项。浏览器收到响应后通常会保存下 Cookie，之后对该服务器每一次请求中都通过 Cookie 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。&lt;/p>
&lt;h5 id="set-cookie响应头部和cookie请求头部">&lt;strong>Set-Cookie响应头部和Cookie请求头部&lt;/strong>&lt;/h5>
&lt;p>服务器使用 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie" target="_blank" rel="noopener"
>&lt;code>Set-Cookie&lt;/code>&lt;/a> 响应头部向用户代理（一般是浏览器）发送 Cookie信息。一个简单的 Cookie 可能像这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">Set-Cookie: &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">cookie名&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>=&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">cookie值&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>服务器通过该头部告知客户端保存 Cookie 信息，客户端得到响应报文后把 Cookie 内容保存到浏览器中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.0&lt;/span> &lt;span class="m">200&lt;/span> &lt;span class="ne">OK&lt;/span>
&lt;span class="n">Content-type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">text/html&lt;/span>
&lt;span class="n">Set-Cookie&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">yummy_cookie=choco&lt;/span>
&lt;span class="n">Set-Cookie&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">tasty_cookie=strawberry&lt;/span>
[page content]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在，对该服务器发起的每一次新请求，浏览器都会将之前保存的Cookie信息通过 Cookie 请求首部字段再发送给服务器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="nf">GET&lt;/span> &lt;span class="nn">/sample_page.html&lt;/span> &lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span>
&lt;span class="n">Host&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">www.example.org&lt;/span>
&lt;span class="n">Cookie&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">yummy_cookie=choco; tasty_cookie=strawberry&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="生命周期">生命周期&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>会话期 Cookie&lt;/strong>：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效&lt;/li>
&lt;li>&lt;strong>持久性 Cookie&lt;/strong>：指定过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="作用域">作用域&lt;/h4>
&lt;h5 id="domain-标识">&lt;strong>Domain 标识&lt;/strong>&lt;/h5>
&lt;p>&lt;code>Domain&lt;/code>标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前文档的主机（不包含子域名）。如果指定了 Domain，则一般包含子域名。例如，如果设置 Domain=mozilla.org，则 Cookie 也包含在子域名中（如 developer.mozilla.org）。&lt;/p>
&lt;h5 id="path-标识">&lt;strong>Path 标识&lt;/strong>&lt;/h5>
&lt;p>&lt;code>Path&lt;/code> 标识指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 %x2F (&amp;quot;/&amp;quot;) 作为路径分隔符，子路径也会被匹配。例如，设置 Path=/docs，则以下地址都会匹配：&lt;/p>
&lt;ul>
&lt;li>/docs&lt;/li>
&lt;li>/docs/Web/&lt;/li>
&lt;li>/docs/Web/HTTP&lt;/li>
&lt;/ul>
&lt;h4 id="限制访问">限制访问&lt;/h4>
&lt;h5 id="secure-属性">&lt;strong>Secure 属性&lt;/strong>&lt;/h5>
&lt;p>标记为 &lt;code>Secure&lt;/code> 的 Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端，因此可以预防&lt;strong>中间人&lt;/strong>的攻击。但即便设置了 &lt;code>Secure&lt;/code> 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，&lt;code>Secure&lt;/code> 标记也无法提供确实的安全保障, 例如，可以访问客户端硬盘的人可以读取它。&lt;/p>
&lt;h5 id="httponly-属性">&lt;strong>HttpOnly 属性&lt;/strong>&lt;/h5>
&lt;p>标记为 &lt;code>HttpOnly&lt;/code> 的 Cookie 不能被 JavaScript 脚本调用。&lt;strong>跨站脚本攻击 (XSS)&lt;/strong> 常常使用 JavaScript 的 &lt;code>document.cookie&lt;/code> API 窃取用户的 Cookie 信息，因此使用 HttpOnly 标记可以在一定程度上避免 XSS 攻击。&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下为一个Golang实现的简单的使用 Cookie 的代码示例：&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/Huangkai1008/84e3f3dd5f399412e7bdae4a348551fe.js">&lt;/script>
&lt;h3 id="session">Session&lt;/h3>
&lt;blockquote>
&lt;p>&lt;code>Session&lt;/code> 代表着服务器和客户端一次会话的过程。&lt;code>Session&lt;/code> 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束&lt;/p>
&lt;/blockquote>
&lt;h3 id="cookie-和-session-的不同">Cookie 和 Session 的不同&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>作用范围不同&lt;/strong>，&lt;code>Cookie&lt;/code> 保存在客户端，&lt;code>Session&lt;/code> 保存在服务端&lt;/li>
&lt;li>&lt;strong>存取方式的不同&lt;/strong>，&lt;code>Cookie&lt;/code> &lt;strong>只能保存 ASCII&lt;/strong>，&lt;code>Session&lt;/code> 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息&lt;/li>
&lt;li>&lt;strong>有效期不同&lt;/strong>，&lt;code>Cookie&lt;/code> 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效&lt;/li>
&lt;li>&lt;strong>隐私策略不同&lt;/strong>，&lt;code>Cookie&lt;/code> 存储在客户端，比较容易遭到不法获取；&lt;code>Session&lt;/code> 存储在服务端，安全性相对要好一些&lt;/li>
&lt;li>&lt;strong>存储大小不同&lt;/strong>， &lt;strong>单个 &lt;code>Cookie&lt;/code> 保存的数据不能超过 4KB&lt;/strong>，&lt;code>Session&lt;/code> 可存储上限远高于 &lt;code>Cookie&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="七web-缓存">七、Web 缓存&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>Web缓存（&lt;code>Web cache&lt;/code>）&lt;/strong>（或 &lt;strong>HTTP 缓存（&lt;code>HTTP cache&lt;/code>）&lt;/strong>）是用于临时存储（缓存）Web文档（如HTML页面和图像），以减少服务器延迟的一种信息技术。Web缓存系统会保存下通过这套系统的文档的副本；如果满足某些条件，则可以由缓存满足后续请求。 Web缓存系统既可以指设备，也可以指计算机程序&lt;/p>
&lt;/blockquote>
&lt;h3 id="缓存的种类">缓存的种类&lt;/h3>
&lt;p>缓存的种类有很多,其大致可归为两类：&lt;strong>私有&lt;/strong>与&lt;strong>共享缓存&lt;/strong>。共享缓存存储的响应能够被多个用户使用。私有缓存只能用于单独用户。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211113114522.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211113114522.png"
loading="lazy"
alt="缓存的种类">
&lt;/a>
&lt;figcaption>缓存的种类&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="私有浏览器缓存">&lt;strong>（私有）浏览器缓存&lt;/strong>&lt;/h4>
&lt;p>&lt;strong>私有缓存（&lt;code>local cache&lt;/code>/&lt;code>private cache&lt;/code>）&lt;/strong> 只能用于单独用户。浏览器缓存拥有用户通过 HTTP 下载的所有文件，可以避免再次向服务器发起多余的请求，也可以提供缓存内容的离线浏览。&lt;/p>
&lt;h4 id="共享代理缓存">&lt;strong>（共享）代理缓存&lt;/strong>&lt;/h4>
&lt;p>&lt;strong>共享缓存（&lt;code>shared cache&lt;/code>/&lt;code>proxy cache&lt;/code>）&lt;/strong> 可以被多个用户使用。例如，ISP 或者公司可能会架设一个 web 代理来作为本地网络基础的一部分提供给用户，这样热门的资源就会被重复使用，减少网络拥堵与延迟。&lt;/p>
&lt;h3 id="缓存控制">缓存控制&lt;/h3>
&lt;h4 id="cache-control">Cache-Control&lt;/h4>
&lt;p>&lt;strong>HTTP/1.1&lt;/strong>定义的 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noopener"
>&lt;code>Cache-Control&lt;/code>&lt;/a> 头用来区分对缓存机制的支持情况， 请求头和响应头都支持这个属性。通过它提供的不同的值来定义缓存策略。&lt;/p>
&lt;h5 id="禁止进行缓存">&lt;strong>禁止进行缓存&lt;/strong>&lt;/h5>
&lt;p>缓存中不得存储任何关于客户端请求和服务端响应的内容。每次由客户端发起的请求都会下载完整的响应内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">Cache-Control: no-store
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="强制确认缓存">&lt;strong>强制确认缓存&lt;/strong>&lt;/h5>
&lt;p>缓存服务器需要先向源服务器验证缓存资源的有效性，只有当缓存资源有效时才能使用该缓存对客户端的请求进行响应。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">Cache-Control: no-cache
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="私有缓存和公共缓存">&lt;strong>私有缓存和公共缓存&lt;/strong>&lt;/h5>
&lt;p>&lt;strong>&lt;code>private&lt;/code>&lt;/strong> 指令规定了将资源作为私有缓存，只能被单独用户使用，一般存储在用户浏览器中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">Cache-Control: private
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;code>public&lt;/code>&lt;/strong> 指令规定了将资源作为公共缓存，可以被任何中间人（比如中间代理、CDN等）缓存，可以被多个用户使用，一般存储在代理服务器中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">Cache-Control: public
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="过期">&lt;strong>过期&lt;/strong>&lt;/h5>
&lt;p>&lt;strong>&lt;code>max-age&lt;/code>&lt;/strong> 指令出现在请求报文，并且缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存，&lt;/p>
&lt;p>&lt;strong>&lt;code>max-age&lt;/code>&lt;/strong> 指令出现在响应报文，表示缓存资源在缓存服务器中保存的时间：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">Cache-Control: max-age=31536000
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;code>Expires&lt;/code>&lt;/strong> 首部字段也可以用于告知缓存服务器该资源什么时候会过期：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">Expires: Wed, 04 Jul 2012 08:26:05 GMT
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在&lt;strong>HTTP/1.1&lt;/strong>中，会优先处理 &lt;strong>&lt;code>max-age&lt;/code>&lt;/strong> 指令，在&lt;strong>HTTP/1.0&lt;/strong>中，会忽略掉 &lt;strong>&lt;code>max-age&lt;/code>&lt;/strong> 指令。&lt;/p>
&lt;h5 id="验证方式">&lt;strong>验证方式&lt;/strong>&lt;/h5>
&lt;p>当使用了 &lt;strong>&lt;code>must-revalidate&lt;/code>&lt;/strong> 指令，那就意味着缓存在考虑使用一个陈旧的资源时，必须先验证它的状态，已过期的缓存将不被使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">Cache-Control: must-revalidate
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="新鲜度freshness">新鲜度(&lt;code>freshness&lt;/code>)&lt;/h4>
&lt;blockquote>
&lt;p>服务端和客户端为资源约定一个过期时间，在该过期时间之前，该资源（缓存副本）就是新鲜的，当过了过期时间后，该资源（缓存副本）则变为陈旧的。驱逐算法用于将陈旧的资源（缓存副本）替换为新鲜的，注意，&lt;strong>一个陈旧的资源（缓存副本）是不会直接被清除或忽略的&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>对于含有特定头信息的请求，会去计算缓存寿命。比如&lt;code>Cache-control: max-age=N&lt;/code>的头，相应的缓存的寿命就是&lt;code>N&lt;/code>。&lt;/p>
&lt;p>缓存失效时间计算公式如下：
$$
expirationTime = responseTime + freshnessLifetime - currentAge
$$
其中，&lt;code>responseTime&lt;/code> 表示浏览器接收到此响应的时间点。&lt;/p>
&lt;h4 id="缓存验证validation">缓存验证(&lt;code>validation&lt;/code>)&lt;/h4>
&lt;h5 id="etag">&lt;strong>ETag&lt;/strong>&lt;/h5>
&lt;blockquote>
&lt;p>&lt;strong>&lt;code>ETag&lt;/code>&lt;/strong> 响应头是 URL 的&lt;code>Entity Tag&lt;/code>，作为一个URL资源的标识符，作为缓存的一种&lt;strong>强校验器&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">ETag: &amp;#34;82e22293907ce725faf67773957acd12&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当服务端返回资源时，可以根据返回内容计算一个 hash 值或者就是一个数字版本号作为 ETag 的值放到响应首部中，客户端可以在后续的请求的头中可以将缓存资源的 ETag 值放到 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match" target="_blank" rel="noopener"
>&lt;code>If-None-Match&lt;/code>&lt;/a> 头首部，服务器收到该请求后，判断缓存资源的 ETag 值和资源的最新 ETag 值是否一致，如果一致则表示缓存资源有效，返回 &lt;code>304 Not Modified&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">If-None-Match: &amp;#34;82e22293907ce725faf67773957acd12&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="last-modified">&lt;strong>Last-Modified&lt;/strong>&lt;/h5>
&lt;p>&lt;strong>&lt;code>Last-Modified&lt;/code>&lt;/strong> 响应头可以作为缓存验证的一种&lt;strong>弱校验器&lt;/strong>，如果响应头里含有这个信息，客户端可以在后续的请求中带上 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Modified-Since" target="_blank" rel="noopener"
>&lt;code>If-Modified-Since&lt;/code>&lt;/a> 来验证缓存。服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 &lt;code>200 OK&lt;/code>。如果请求的资源从那时起未经修改，那么返回一个不带有实体主体的 &lt;code>304 Not Modified&lt;/code> 响应报文。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="etag-与-last-modified的对比">Etag 与 Last-Modified的对比&lt;/h5>
&lt;p>&lt;code>Etag&lt;/code> 是强校验器，&lt;code>Last-Modified&lt;/code> 是弱校验器，都同时出现时，&lt;strong>&lt;code>Etag&lt;/code>的优先级更高&lt;/strong>。&lt;strong>&lt;code>Last-Modified&lt;/code>的精度只能到秒&lt;/strong>，如果一个资源频繁修改，用&lt;code>Last-Modified&lt;/code>并不能区分，而&lt;code>Etag&lt;/code> 由于每次资源更新时都会生成新的值，会使缓存验证更加准确，缺点是频繁生成的策略可能会额外消耗服务器资源。&lt;/p>
&lt;h3 id="强制缓存与协商缓存">强制缓存与协商缓存&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>强制缓存&lt;/strong>：浏览器不会向服务器发送任何请求，直接从本地缓存中读取文件并返回状态码&lt;code>200 OK&lt;/code>；&lt;/p>
&lt;p>&lt;strong>协商缓存&lt;/strong>：浏览器向服务器发送请求，服务器会根据这个请求的请求首部来判断是否命中协商缓存，如果命中，则返回&lt;code>304 Not Modified&lt;/code>并带上新的响应首部通知浏览器从缓存中读取资源&lt;/p>
&lt;/blockquote>
&lt;h5 id="强制缓存的首部字段">强制缓存的首部字段&lt;/h5>
&lt;ul>
&lt;li>&lt;strong>&lt;code>Expires&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>Cache Control&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h5 id="协商缓存的首部字段">协商缓存的首部字段&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;code>Etag&lt;/code>&lt;/strong> &amp;amp; &lt;strong>&lt;code>If-None-Match&lt;/code>&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>Last-Modifed&lt;/code>&lt;/strong> &amp;amp; &lt;strong>&lt;code>If-Modified-Since&lt;/code>&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>强制缓存&lt;/strong>和&lt;strong>协商缓存&lt;/strong>都存在的情况下，先判断&lt;strong>强制缓存&lt;/strong>是否生效，如果生效，不用发起请求，直接用缓存。如果&lt;strong>强制缓存&lt;/strong>不生效再发起请求判断&lt;strong>协商缓存&lt;/strong>。&lt;/p>
&lt;h2 id="八http1x-的性能问题及优化方案">八、HTTP/1.x 的性能问题及优化方案&lt;/h2>
&lt;p>虽然HTTP/1.1 的持久连接和管道机制允许复用TCP连接，在一个TCP连接中，也可以同时发送多个请求，但是所有的数据通信都是按次序完成的，服务器只有处理完一个回应，才会处理下一个回应。&lt;/p>
&lt;p>比如客户端需要A、B两个资源，管道机制允许浏览器同时发出 A 请求和 B 请求，但服务器还是按照顺序，先回应 A 请求，完成后再回应 B 请求，这样如果前面的回应特别慢，后面就会有很多请求排队等着，这称为&lt;strong>队头阻塞（&lt;code>Head-of-line blocking&lt;/code>）&lt;/strong>。&lt;/p>
&lt;h3 id="并发连接">并发连接&lt;/h3>
&lt;p>&lt;strong>HTTP/1.x&lt;/strong> 可以通过对同一个域名发起多个长连接的方式提高通信效率，此种方式称为&lt;strong>并发连接（&lt;code>concurrent connections&lt;/code>）&lt;/strong>。&lt;/p>
&lt;p>但是如果客户端滥用并发连接会对带宽和服务器都产生影响，一般来说，现在的浏览器支持的并发连接个数为6 ~ 8个。&lt;/p>
&lt;h3 id="域名分片">域名分片&lt;/h3>
&lt;p>&lt;strong>域名分片（&lt;code>domain sharding&lt;/code>）&lt;/strong> 会将内容拆分到多个子域名中。当使用多个域名来处理多个资源时，浏览器能够同时下载更多资源，从而缩短了页面加载时间并改善了用户体验。&lt;/p>
&lt;p>这种方式的问题在于每个域都需要额外的 DNS 查找成本以及建立每个 TCP 连接的开销。&lt;/p>
&lt;h3 id="http2http2md">&lt;a class="link" href="HTTP2.md" >HTTP/2&lt;/a>&lt;/h3>
&lt;p>&lt;strong>HTTP/2&lt;/strong> 主要是为了改进 &lt;strong>HTTP/1.x&lt;/strong> 的性能问题而产生的，在现在，&lt;strong>不推荐使用域名分片的手段提高 HTTP 连接性能&lt;/strong>，而是直接升级到 &lt;strong>HTTP/2&lt;/strong>。&lt;/p>
&lt;h2 id="九https">九、HTTPS&lt;/h2>
&lt;h3 id="http-的安全性问题">HTTP 的安全性问题&lt;/h3>
&lt;ul>
&lt;li>使用明文进行通信，内容可能会被窃听&lt;/li>
&lt;li>不验证通信方的身份，通信方的身份有可能遭遇伪装&lt;/li>
&lt;li>无法证明报文的完整性，报文有可能遭篡改&lt;/li>
&lt;/ul>
&lt;h3 id="https-概念">HTTPS 概念&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>超文本传输安全协议&lt;/strong>（英语：&lt;strong>H&lt;/strong>yper&lt;strong>T&lt;/strong>ext &lt;strong>T&lt;/strong>ransfer &lt;strong>P&lt;/strong>rotocol &lt;strong>S&lt;/strong>ecure，缩写 &lt;code>HTTPS&lt;/code>；常称为 HTTP over TLS、HTTP over SSL 或HTTP Secure），是一种通过计算机网络进行安全通信的协议。&lt;/p>
&lt;p>HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。&lt;/p>
&lt;p>严格来说，&lt;strong>HTTPS&lt;/strong> 并不是单独的协议，而是对工作在一加密连接（TLS 或 SSL）上的常规HTTP协议的称呼。&lt;/p>
&lt;/blockquote>
&lt;h3 id="https-作用">HTTPS 作用&lt;/h3>
&lt;h4 id="加密confidentiality">加密（Confidentiality）&lt;/h4>
&lt;p>访问者的连接被加密，隐藏了 URL、cookie 和其他敏感的元数据&lt;/p>
&lt;h4 id="认证authenticity">认证（Authenticity）&lt;/h4>
&lt;p>确认访问者正在访问真实网站，而不是与冒充者或通过中间人通信&lt;/p>
&lt;h4 id="完整性保护integrity">完整性保护（Integrity）&lt;/h4>
&lt;p>访问者与网站之间发送的数据未被篡改或修改&lt;/p>
&lt;h3 id="加密方式">加密方式&lt;/h3>
&lt;p>HTTPS 采用混合加密机制&lt;/p>
&lt;ul>
&lt;li>使用非对称密钥加密方式，传输对称密钥加密方式所需要的 Secret Key，从而保证安全性&lt;/li>
&lt;li>获取到 Secret Key 后，再使用对称密钥加密方式进行通信，从而保证效率&lt;/li>
&lt;/ul>
&lt;h4 id="对称密钥加密">对称密钥加密&lt;/h4>
&lt;blockquote>
&lt;p>&lt;strong>对称密钥加密（&lt;code>Symmetric-Key Encryption&lt;/code>）&lt;/strong>，加密和解密使用同一密钥&lt;/p>
&lt;/blockquote>
&lt;h4 id="非对称密钥加密">非对称密钥加密&lt;/h4>
&lt;blockquote>
&lt;p>&lt;strong>非对称密钥加密&lt;/strong>，又称&lt;strong>公开密钥加密（&lt;code>Public-Key Encryption&lt;/code>）&lt;/strong>，加密和解密使用不同的密钥&lt;/p>
&lt;/blockquote>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>【日】户根勤. (2017). 网络是怎样连接的. 人民邮电出版社.&lt;/li>
&lt;li>Kurose, J. F., &amp;amp; Ross, K. W. (2018). &lt;em>计算机网络-自顶而下方法&lt;/em> (7th ed.). 机械工业出版社.&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener"
>Wikipedia : HTTP&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/HTTP" target="_blank" rel="noopener"
>MDN : HTTP&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener"
>MDN : Cookies&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching" target="_blank" rel="noopener"
>MDN : HTTP Caching&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://https.cio.gov/faq/" target="_blank" rel="noopener"
>Introduction to HTTPS&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>MySQL的日志系统</title><link>https://huangkai1008.github.io/p/mysql%E7%9A%84%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><pubDate>Fri, 05 Jun 2020 22:07:21 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E7%9A%84%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid><description>&lt;h1 id="mysql的日志系统">MySQL的日志系统&lt;/h1>
&lt;h2 id="一日志类型">一、日志类型&lt;/h2>
&lt;blockquote>
&lt;p>MySQL主要有两种日志类型，一种是&lt;strong>物理日志&lt;/strong>（记录在某个数据页上做了什么修改)，一种是&lt;strong>逻辑日志&lt;/strong>(存储了逻辑SQL修改语句)。&lt;/p>
&lt;p>&lt;code>redo log&lt;/code>属于物理日志，&lt;code>binlog&lt;/code>和&lt;code>undo log&lt;/code>属于逻辑日志，其中物理日志的恢复速度远快于逻辑日志。&lt;/p>
&lt;/blockquote>
&lt;h2 id="二重做日志redo-log">二、重做日志(redo log)&lt;/h2>
&lt;h3 id="基本概念">基本概念&lt;/h3>
&lt;blockquote>
&lt;p>重做日志（redo log）是 InnoDB 引擎层的日志，用来记录事务操作引起数据的变化，记录的是数据页的物理修改，提供&lt;strong>前滚&lt;/strong>操作。&lt;strong>MySQL 通过 redo log 保证事务的持久性&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>重做日志由两部分组成，一是内存中的&lt;strong>重做日志缓冲区 (&lt;code>redo log buffer&lt;/code>)&lt;/strong>，它是&lt;strong>易失的&lt;/strong>，另一个就是在磁盘上的&lt;strong>重做日志文件 (&lt;code>redo log file&lt;/code>)&lt;/strong>，它是&lt;strong>持久的&lt;/strong>。&lt;/p>
&lt;p>InnoDB 引擎对数据更新，是先将更新记录写入到重做日志，在系统空闲时或者按照设定的更新策略再将日志中的内容更新到磁盘中，这就是&lt;strong>预写式技术 (&lt;code>Write Ahead logging, WAL&lt;/code>)&lt;/strong>，这种技术可以大大减少IO操作的频率，提升数据刷新的效率。&lt;/p>
&lt;h3 id="逻辑结构">逻辑结构&lt;/h3>
&lt;p>redo log 的大小是固定的，为了能够持续不断的对更新记录进行写入，在redo log日志中设置了两个标志位置，&lt;code>checkpoint&lt;/code>和&lt;code>write pos&lt;/code>。&lt;code>checkpoint&lt;/code>表示记录擦除的位置，&lt;code>write pos&lt;/code>表示记录写入的位置。当&lt;code>write pos&lt;/code>标志到了日志结尾时，会从结尾跳至日志头部循环写入，所以redo log的逻辑结构并不是线性的，可以看做一个圆周运动，逻辑结构见下图：&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413231000.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413231000.png"
loading="lazy"
alt="redo log的逻辑结构">
&lt;/a>
&lt;figcaption>redo log的逻辑结构&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>当&lt;code>write_pos&lt;/code>追上&lt;code>checkpoint&lt;/code>时，表示redo log日志已经写满。这时不能继续执行新的数据库更新语句，需要停下来先删除一些记录，执行&lt;code>checkpoint&lt;/code>规则腾出可写空间。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>checkpoint规则&lt;/strong>：checkpoint触发后，将buffer中脏数据页和脏日志页都刷到磁盘。所谓的脏数据页就是指内存中未刷到磁盘的数据&lt;/p>
&lt;/blockquote>
&lt;h3 id="刷盘">刷盘&lt;/h3>
&lt;blockquote>
&lt;p>&lt;code>redo log buffer&lt;/code> 数据页写入磁盘中的&lt;code>redo log file&lt;/code>的过程叫做&lt;strong>刷盘&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>在计算机操作系统中，用户空间(&lt;code>user space&lt;/code>)下的缓冲区数据一般情况下是无法直接写入磁盘的，中间必须经过操作系统内核空间(&lt;code>kernel space&lt;/code>)的缓冲区(&lt;code>OS Buffer&lt;/code>)。因此，&lt;code>redo log buffer&lt;/code>写入&lt;code>redo log file&lt;/code>实际上是先写入&lt;code>OS Buffer&lt;/code>，然后再通过系统调用&lt;code>fsync()&lt;/code>将其刷到&lt;code>redo log file&lt;/code>中，流程如下图：&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211019163050.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211019163050.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>当数据修改时，除了修改&lt;code>buffer pool&lt;/code>中的数据，还会在redo log中记录这次操作。如果MySQL宕机，重启时可以读取redo log中的数据，对数据库进行恢复，从而保证了事务的持久性，&lt;strong>使得数据库获得&lt;code>crash-safe&lt;/code>能力。&lt;/strong>&lt;/p>
&lt;h4 id="刷盘策略">刷盘策略&lt;/h4>
&lt;p>在提交事务的时候，InnoDB会根据配置的策略来将 redo log 刷盘，这个可以通过&lt;code>innodb_flush_log_at_trx_commit&lt;/code> 参数来配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SHOW&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VARIABLES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LIKE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;innodb_flush_log_at_trx_commit&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+--------------------------------+-------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Variable_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+--------------------------------+-------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">innodb_flush_log_at_trx_commit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+--------------------------------+-------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>各参数的含义如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">参数值&lt;/th>
&lt;th style="text-align:center">含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>0（延迟写）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">事务提交时不会将&lt;code>redo log buffer&lt;/code>中日志写入到&lt;code>OS Buffer&lt;/code>，而是定时写入&lt;code>OS buffer&lt;/code>并调用&lt;code>fsync()&lt;/code>写入到&lt;code>redo log file&lt;/code>中。当系统崩溃，会丢失数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>1 （实时写，实时刷）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">事务每次提交都会将&lt;code>redo log buffer&lt;/code>中的日志写入&lt;code>OS buffer&lt;/code>并调用&lt;code>fsync()&lt;/code>刷到&lt;code>redo log file&lt;/code>中。这种方式即使系统崩溃也不会丢失任何数据，但是因为每次提交都写入磁盘，IO的性能较差。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>2 （实时写，延时刷）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">每次提交都仅写入到&lt;code>OS buffer&lt;/code>，然后是每秒调用&lt;code>fsync()&lt;/code>将&lt;code>os buffer&lt;/code>中的日志写入到&lt;code>redo log file&lt;/code>。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>为了保证事务的&lt;code>持久性&lt;/code>，一般使用默认值，将 &lt;code>innodb_flush_log_at_trx_commit&lt;/code> 设置为&lt;code>1&lt;/code>即可。&lt;/strong>&lt;/p>
&lt;h2 id="三二进制日志-binlog">三、二进制日志 (binlog)&lt;/h2>
&lt;h3 id="基本概念-1">基本概念&lt;/h3>
&lt;blockquote>
&lt;p>&lt;code>binlog&lt;/code>（&lt;strong>二进制日志&lt;/strong>、&lt;strong>归档日志&lt;/strong>），用于记录数据库执行的写入性操作信息，以二进制的形式保存在磁盘中。&lt;/p>
&lt;/blockquote>
&lt;h3 id="使用场景">使用场景&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>主从复制&lt;/strong>：从库利用主库上的 binlog 进行重播，实现主从同步&lt;/li>
&lt;li>&lt;strong>数据恢复&lt;/strong>：用于数据库的基于时间点、位点等的还原操作（&lt;code>mysqlbinlog&lt;/code>）&lt;/li>
&lt;/ol>
&lt;h3 id="日志格式">日志格式&lt;/h3>
&lt;p>&lt;code>binlog&lt;/code>日志有三种格式，分别为&lt;code>STATMENT&lt;/code>、&lt;code>ROW&lt;/code>和&lt;code>MIXED&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>在 MySQL 5.7.7之前，默认的格式是&lt;code>STATEMENT&lt;/code>，MySQL 5.7.7之后，默认值是&lt;code>ROW&lt;/code>。日志格式通过&lt;code>binlog-format&lt;/code>指定。&lt;/p>
&lt;/blockquote>
&lt;h4 id="statement">&lt;strong>&lt;code>STATEMENT&lt;/code>&lt;/strong>&lt;/h4>
&lt;p>&lt;code>STATMENT&lt;/code> &lt;strong>基于SQL语句的复制(&lt;code>statement-based replication, SBR&lt;/code>)&lt;/strong>，会记录每一条修改数据的SQL语句和执行语句的上下文信息&lt;/p>
&lt;h5 id="优点">&lt;strong>优点&lt;/strong>&lt;/h5>
&lt;p>&lt;code>STATMENT&lt;/code> 模式不需要记录每一行的变化，减少了&lt;code>binlog&lt;/code>的日志量，节省了I/O和存储资源,，从而提高了性能&lt;/p>
&lt;h5 id="缺点">&lt;strong>缺点&lt;/strong>&lt;/h5>
&lt;p>&lt;code>STATMENT&lt;/code> 模式在某些情况下会导致主从数据不一致，比如执行&lt;code>sysdate()&lt;/code>、&lt;code>sleep()&lt;/code>等&lt;/p>
&lt;h4 id="row">&lt;strong>&lt;code>ROW&lt;/code>&lt;/strong>&lt;/h4>
&lt;p>&lt;code>ROW&lt;/code> &lt;strong>基于行的复制(&lt;code>row-based replication, RBR&lt;/code>)&lt;/strong>，会记录每一行数据被修改的形式&lt;/p>
&lt;h5 id="优点-1">&lt;strong>优点&lt;/strong>&lt;/h5>
&lt;p>&lt;code>ROW&lt;/code> 模式下的日志内容会非常清楚的记录下每一行数据的修改细节，非常容易理解，而且不会出现某些特定情况下的存储过程和 function，以及 trigger 的调用和触发无法被正确复制问题&lt;/p>
&lt;h5 id="缺点-1">&lt;strong>缺点&lt;/strong>&lt;/h5>
&lt;p>&lt;code>ROW&lt;/code> 模式下会产生大量的日志&lt;/p>
&lt;h4 id="mixed">&lt;strong>MIXED&lt;/strong>&lt;/h4>
&lt;p>&lt;code>MIXED&lt;/code> &lt;strong>基于&lt;code>STATMENT&lt;/code>和&lt;code>ROW&lt;/code>两种模式的混合复制(&lt;code>mixed-based replication, MBR&lt;/code>)&lt;/strong>，一般的复制使用&lt;code>STATEMENT&lt;/code>模式保存，对于&lt;code>STATEMENT&lt;/code>模式无法复制的操作使用&lt;code>ROW&lt;/code>模式保存&lt;/p>
&lt;h3 id="刷盘策略-1">刷盘策略&lt;/h3>
&lt;p>&lt;strong>MySQL 只有在事务提交的时候才会记录 binlog 日志&lt;/strong>，此时日志还在内存中，MySQL 通过&lt;code>sync_binlog&lt;/code>参数控制 biglog 的刷盘时机，取值范围是&lt;code>0-N&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>0&lt;/strong>： 不做强制要求，由系统自行判断何时写入磁盘&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>1&lt;/strong>：每次事务提交时 binlog 都会写入磁盘&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>N&lt;/strong>：每N个事务 binlog 会写入磁盘&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sync_binlog&lt;/code>最安全的是设置是&lt;strong>1&lt;/strong>，这也是 MySQL 5.7.7之后版本的默认值，但是也可以设置一个大一些的值可以提升数据库性能，因此实际情况下也可以将值适当调大，牺牲一定的一致性来获取更好的性能。&lt;/p>
&lt;h3 id="与重做日志的区别">与重做日志的区别&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;/th>
&lt;th>&lt;code>redo log&lt;/code>&lt;/th>
&lt;th>&lt;code>binlog&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>实现方式&lt;/strong>&lt;/td>
&lt;td>InnoDB引擎特有的&lt;/td>
&lt;td>MySQL的Server层实现的，所有引擎都可以使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>日志类型&lt;/strong>&lt;/td>
&lt;td>物理日志&lt;/td>
&lt;td>逻辑日志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>写入方式&lt;/strong>&lt;/td>
&lt;td>循环写，空间固定会用完&lt;/td>
&lt;td>追加写入，binlog文件写到一定大小后会切换到下一个&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>适用场景&lt;/strong>&lt;/td>
&lt;td>崩溃恢复(&lt;code>crash-safe&lt;/code>)&lt;/td>
&lt;td>主从复制和数据恢复&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="两阶段提交two-phase-commit2pc">两阶段提交（&lt;code>Two-phase Commit，2PC&lt;/code>）&lt;/h3>
&lt;p>MySQL 事务提交的时候，需要同时完成 &lt;code>redo log&lt;/code> 和 &lt;code>binlog&lt;/code> 的提交，为了让两份日志之间的逻辑一致，需要用到&lt;strong>两阶段提交&lt;/strong>，这个场景下的两阶段提交发生在 MySQL 内部，和分布式系统的两阶段提交是两个概念。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211020170253.svg" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211020170253.svg"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="四回滚日志-undo-log">四、回滚日志 (undo log)&lt;/h2>
&lt;blockquote>
&lt;p>当事务对数据库进行修改，InnoDB引擎不仅会记录redo log，还会生成对应的undo log日志；如果事务执行失败或调用了rollback，导致事务需要回滚，就可以利用undo log中的信息将数据回滚到修改之前的状态。&lt;strong>MySQL 通过 undo log 保证事务的原子性&lt;/strong>。undo log有两个作用，一是提供&lt;strong>回滚&lt;/strong>，二是实现 &lt;strong>&lt;code>MVCC&lt;/code>&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>回滚日志并不能将数据库物理地恢复到执行语句或者事务之前的样子；它是逻辑日志，当回滚日志被使用时，它只会按照日志逻辑地将数据库中的修改撤销掉，可以理解为，我们在事务中使用的每一条 &lt;code>INSERT&lt;/code> 都对应了一条 &lt;code>DELETE&lt;/code>，每一条 &lt;code>UPDATE&lt;/code> 也都对应一条相反的 &lt;code>UPDATE&lt;/code> 语句。&lt;/p>
&lt;h3 id="事务日志">事务日志&lt;/h3>
&lt;p>在数据库系统中，事务的&lt;strong>原子性&lt;/strong>和&lt;strong>持久性&lt;/strong>是由&lt;strong>事务日志（&lt;code>transaction log&lt;/code>）&lt;strong>保证的，而&lt;code>redo log&lt;/code>和&lt;code>undo log&lt;/code>都属于&lt;/strong>InnoDB&lt;/strong>引擎层下的&lt;strong>事务日志（&lt;code>transaction log&lt;/code>）&lt;/strong>。这两种事务日志可以保证：&lt;/p>
&lt;ol>
&lt;li>发生错误或者需要回滚的事务能够成功回滚（原子性）&lt;/li>
&lt;li>在事务提交后，数据没来得及写入磁盘就宕机时，在下次重新启动后能够成功恢复数据（持久性）&lt;/li>
&lt;/ol>
&lt;p>在数据库中，这两种日志经常都是一起工作的，可以将它们整体看做一条事务日志，其中包含了事务的 ID、修改的行元素以及修改前后的值。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211020225433.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211020225433.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>一条事务日志同时包含了修改前后的值，能够非常简单的进行回滚和重做两种操作。&lt;/p></description></item><item><title>MySQL的事务</title><link>https://huangkai1008.github.io/p/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1/</link><pubDate>Tue, 02 Jun 2020 22:25:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1/</guid><description>&lt;h2 id="一概念">一、概念&lt;/h2>
&lt;blockquote>
&lt;p>事务就是一组原子性的SQL查询，或者说一个独立的工作单元。如果数据库引擎能够成功地对数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。&lt;strong>在 MySQL 中，事务支持是在引擎层实现的。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h3 id="隔离级别isolation-level">隔离级别（Isolation level）&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>READ UNCOMMITTED（读未提交）&lt;/strong>&lt;/p>
&lt;p>事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这也被称为&lt;code>脏读（Dirty Read）&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>READ COMMITTED（读提交）&lt;/strong>&lt;/p>
&lt;p>Oracle和SQL Server的默认隔离级别。一个事务可以读取另一个已提交的事务。换句话说，一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的。这个级别有时候也叫做不可重复读（nonrepeatable read），因为两次执行同样的查询，可能会得到不一样的结果。&lt;strong>MySQL的InnoDB引擎在提交读级别通过MVCC解决了不可重复读的问题。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>REPEATABLE READ（可重复读）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>MySQL的默认隔离级别&lt;/strong>。一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。&lt;strong>MySQL的InnoDB引擎在可重复读级别通过间隙锁解决了幻读问题&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>SERIALIZABLE（可串行化）&lt;/strong>&lt;/p>
&lt;p>SERIALIZABLE是最高的隔离级别。它通过强制事务串行执行，避免了前面说的幻读的问题。简单来说，SERIALIZABLE会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用的问题。实际应用中也很少用到这个隔离级别，只有在非常需要确保数据的一致性而且可以接受没有并发的情况下，才考虑采用该级别。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">隔离级别&lt;/th>
&lt;th style="text-align:center">脏读可能性&lt;/th>
&lt;th style="text-align:center">不可重复读可能性&lt;/th>
&lt;th style="text-align:center">幻读可能性&lt;/th>
&lt;th style="text-align:center">加锁读&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">READ UNCOMMITTED&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">READ COMMITTED&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">REPEATABLE READ&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">SERIALIZABLE&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>查看MySQL的隔离级别&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SHOW&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VARIABLES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LIKE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;transaction_isolation&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+-----------------------+-----------------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Variable_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+-----------------------+-----------------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">transaction_isolation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">REPEATABLE&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">READ&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+-----------------------+-----------------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">set&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">warning&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>设置当前会话的隔离级别&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="kt">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SESSION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TRANSACTION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ISOLATION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LEVEL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">READ&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">COMMITTED&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1"># 设置当前会话为RC级别，下个事务生效
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="事务类型">事务类型&lt;/h3>
&lt;h4 id="隐式事务">&lt;strong>隐式事务&lt;/strong>&lt;/h4>
&lt;p>DML操作的语句都会隐式的开启事务，并且在语句执行后没有错误的话隐式提交。可以通过将MySQL的&lt;code>autocommit&lt;/code>这个变量（默认为1）设置为0将事务的&lt;code>隐式提交&lt;/code>关闭，但需要注意，DML语句的隐式事务仍会启动，只是区别在于需要手动COMMIT显式提交这个事务，也就是将隐式事务转化为长事务了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SHOW&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VARIABLES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LIKE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;autocommit&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1"># 查看隐式事务提交方式
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+---------------+-------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Variable_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+---------------+-------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">autocommit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+---------------+-------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">set&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">warning&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="显式事务">&lt;strong>显式事务&lt;/strong>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="c1"># 1.显式开启一个事务
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">START&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TRANSACTION&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">BEGIN&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1"># 2.提交事务
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1"># 3.回滚事务
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">ROLLBACK&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1"># 4.在事务中创建保存点，可以在同一事务中创建多个，以便通过ROLLBACK更灵活的回滚
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">SAVEPOINT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>显式开启一个事务时，如果还有未提交的事务会自动提交，并且&lt;code>autocommit&lt;/code>会被禁用直到该事务结束。对于显式事务，存在&lt;code>completion_type&lt;/code>这样一个变量控制显式事务的行为。有下列三种情况：&lt;/p>
&lt;ul>
&lt;li>值为0时即为默认，执行COMMIT后提交该显式事务并结束该事务。&lt;/li>
&lt;li>值为1时，执行COMMIT后除了有值为0时的默认行为外，随后会自动开始一个相同隔离级别的事务。术语为&lt;code>COMMIT AND CHAIN&lt;/code>&lt;/li>
&lt;li>值为2时，执行COMMIT后除了有值为0时的默认行为外，随后会断开与服务器的连接。术语为&lt;code>COMMIT AND RELEASE&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="二事务acid特性">二、事务ACID特性&lt;/h2>
&lt;h3 id="持久性durability">持久性（Durability)&lt;/h3>
&lt;blockquote>
&lt;p>已被提交的事务对数据库的修改应该永久保存在数据库中&lt;/p>
&lt;/blockquote>
&lt;p>一个实现了ACID的数据库，相比没有实现ACID的数据库，通常会需要更强的CPU处理能力、更大的内存和更多的磁盘空间。&lt;/p>
&lt;h3 id="原子性atomicity">原子性（Atomicity）&lt;/h3>
&lt;blockquote>
&lt;p>事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行&lt;/p>
&lt;/blockquote>
&lt;p>想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行&lt;strong>回滚&lt;/strong>，而在 MySQL 中，恢复机制是通过&lt;a class="link" href="ch2-MySQL%e7%9a%84%e6%97%a5%e5%bf%97%e7%b3%bb%e7%bb%9f.md#%e5%9b%9b%e3%80%81%e5%9b%9e%e6%bb%9a%e6%97%a5%e5%bf%97%20undo%20log" >四、回滚日志 undo log&lt;/a>实现的&lt;/p>
&lt;h3 id="一致性consistency">一致性（Consistency）&lt;/h3>
&lt;blockquote>
&lt;p>事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。&lt;/p>
&lt;p>数据库对于 ACID 中的一致性的定义是这样的：如果一个事务原子地在一个一致地数据库中独立运行，那么在它执行之后，数据库的状态一定是一致的。对于这个概念，它的第一层意思就是对于数据完整性的约束，包括主键约束、引用约束以及一些约束检查等等，在事务的执行的前后以及过程中不会违背对数据完整性的约束，所有对数据库写入的操作都应该是合法的，并不能产生不合法的数据状态。&lt;/p>
&lt;/blockquote>
&lt;h3 id="隔离性isolation">隔离性（Isolation）&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>通常来说&lt;/strong>，一个事务所做的修改在最终提交以前，对其他事务是不可见的。&lt;/p>
&lt;/blockquote></description></item><item><title>MySQL的基础架构</title><link>https://huangkai1008.github.io/p/mysql%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jun 2020 21:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</guid><description>&lt;h1 id="mysql的基础架构">MySQL的基础架构&lt;/h1>
&lt;h2 id="逻辑架构">逻辑架构&lt;/h2>
&lt;p>MySQL可以大体分为&lt;strong>Server层&lt;/strong>和&lt;strong>存储引擎层&lt;/strong>两部分, 见图1&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211018154957.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20211018154957.png"
loading="lazy"
alt="图1 Mysql逻辑架构图">
&lt;/a>
&lt;figcaption>图1 Mysql逻辑架构图&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;strong>Server 层&lt;/strong>包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。&lt;/li>
&lt;li>&lt;strong>存储引擎层&lt;/strong>负责数据的存储和提取。其架构模式是&lt;strong>插件式&lt;/strong>的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 &lt;strong>InnoDB&lt;/strong>，它从 MySQL 5.5.5 版本开始成为了默认存储引擎&lt;/li>
&lt;/ul>
&lt;h3 id="连接器connector">连接器(&lt;code>Connector&lt;/code>)&lt;/h3>
&lt;p>连接器负责和客户端建立连接、获取权限、维持和管理连接。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="c1"># Mysql连接命令
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">ip&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>MySQL 客户端和服务端完成TCP握手后，连接器需要认证身份&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果用户名或密码不对，就会收到一个 &lt;strong>Access denied for user&lt;/strong> 的错误，然后客户端程序结束执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果用户名密码认证通过，连接器会到权限表里面查出拥有的权限，之后这个连接里面的权限判断逻辑，都将依赖于此时读到的权限，这就意味着，一个用户成功建立连接后，即使这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短
连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。&lt;/p>
&lt;/blockquote>
&lt;h4 id="连接方式">连接方式&lt;/h4>
&lt;ol>
&lt;li>TCP/IP&lt;/li>
&lt;li>命名管道和共享内存&lt;/li>
&lt;li>UNIX 域套接字&lt;/li>
&lt;/ol>
&lt;h3 id="查询缓存query-cache">查询缓存(&lt;code>Query Cache&lt;/code>)&lt;/h3>
&lt;p>在连接建立完成后，MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。&lt;/p>
&lt;blockquote>
&lt;p>注：MySQL 8.0 版本的查询缓存功能被移除了&lt;/p>
&lt;/blockquote>
&lt;h3 id="分析器parser">分析器(&lt;code>Parser&lt;/code>)&lt;/h3>
&lt;p>分析器的主要功能是对SQL语句做解析&lt;/p>
&lt;ul>
&lt;li>分析器会先做&lt;strong>词法分析&lt;/strong>，再做&lt;strong>语法分析&lt;/strong>，语法分析器会根据语法规则，判断 SQL 语句是否满足 MySQL 语法&lt;/li>
&lt;/ul>
&lt;h3 id="优化器query-optimizer">优化器(&lt;code>Query Optimizer&lt;/code>)&lt;/h3>
&lt;p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。优化器并不关心表使用的是什么存储引擎，但存储引擎对于优化查询是有影响的。优化器会请求存储引擎提供容量或某个具体操作的开销信息，以及表数据的统计信息等。例如，某些存储引擎的某种索引，可能对一些特定的查询有优化。&lt;/p>
&lt;h3 id="执行器query-execution-engine">执行器(&lt;code>Query execution engine&lt;/code>)&lt;/h3>
&lt;p>开始执行的时候，要先判断一下对于表有没有执行操作的权限，如果没有，就会返回没有权限的错误。如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。&lt;/p>
&lt;p>对于一个特定的例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假定ID字段没有索引，那么执行器的执行流程是这样的：&lt;/p>
&lt;ol>
&lt;li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；&lt;/li>
&lt;li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。&lt;/li>
&lt;li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。&lt;/li>
&lt;/ol></description></item><item><title>Awesome Software</title><link>https://huangkai1008.github.io/p/awesome-software/</link><pubDate>Sun, 01 Dec 2019 22:21:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/awesome-software/</guid><description>&lt;h2 id="ide">IDE&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Jetbrains&lt;/code>系列&lt;/li>
&lt;/ul>
&lt;h2 id="editor">Editor&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Vscode&lt;/code>&lt;/li>
&lt;li>&lt;code>Sublime text&lt;/code>&lt;/li>
&lt;li>&lt;code>Typora&lt;/code>(markdown编辑)&lt;/li>
&lt;li>&lt;code>Notion&lt;/code>(笔记软件)&lt;/li>
&lt;/ul>
&lt;h2 id="画图">画图&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Microsoft visio&lt;/code>&lt;/li>
&lt;li>&lt;code>drawing.io&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="数据库">数据库&lt;/h2>
&lt;h3 id="mysql系列">Mysql系列&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Navicat&lt;/code>&lt;/li>
&lt;li>&lt;code>Tableplus&lt;/code>&lt;/li>
&lt;li>&lt;code>Jetbrains Datagrip&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="redis系列">Redis系列&lt;/h3>
&lt;ul>
&lt;li>&lt;code>RDM&lt;/code>(redis desktop manager)&lt;/li>
&lt;/ul>
&lt;h2 id="cvs">CVS&lt;/h2>
&lt;ul>
&lt;li>Jetbrains系IDE自带&lt;/li>
&lt;li>&lt;code>SourceTree&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="接口测试">接口测试&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Postman&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="vm">Vm&lt;/h2>
&lt;ul>
&lt;li>&lt;code>VirtualBox&lt;/code>&lt;/li>
&lt;li>&lt;code>Vagrant&lt;/code>&lt;/li>
&lt;li>&lt;code>Windows SubLinux(WSL)&lt;/code>&lt;/li>
&lt;li>&lt;code>Vmware&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="ssh工具">ssh工具&lt;/h2>
&lt;ul>
&lt;li>&lt;code>MobaXterm&lt;/code>&lt;/li>
&lt;li>&lt;code>xshell&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="系统工具">系统工具&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Everything&lt;/code>&lt;/li>
&lt;li>&lt;code>Utools&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="接口文档工具">接口文档工具&lt;/h2>
&lt;ul>
&lt;li>&lt;code>apidoc&lt;/code>&lt;/li>
&lt;li>&lt;code>swagger&lt;/code>&lt;/li>
&lt;li>&lt;code>yapi&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="终端">终端&lt;/h2>
&lt;ul>
&lt;li>&lt;code>cmder&lt;/code>&lt;/li>
&lt;li>&lt;code>Windows Termial&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>日志库Loguru使用教程</title><link>https://huangkai1008.github.io/p/%E6%97%A5%E5%BF%97%E5%BA%93loguru%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link><pubDate>Fri, 22 Nov 2019 15:19:35 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%97%A5%E5%BF%97%E5%BA%93loguru%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid><description>&lt;p>Loguru是一个好用的第三方python日志库&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">pip install loguru
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="初步使用">初步使用&lt;/h2>
&lt;h3 id="添加日志到标准输出流">添加日志到标准输出流&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">format&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">{time}&lt;/span>&lt;span class="s1"> &lt;/span>&lt;span class="si">{level}&lt;/span>&lt;span class="s1"> &lt;/span>&lt;span class="si">{message}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">filter&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;my module&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;INFO&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加日志到文件">添加日志到文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;file_1.log&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rotation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;500 MB&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Automatically rotate too big file&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;file_2.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rotation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;12:00&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># New file is created each day at noon&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;file_3.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rotation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1 week&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Once the file is too old, it&amp;#39;s rotated&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;file_X.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">retention&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;10 days&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Cleanup after some time&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;file_Y.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">compression&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zip&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Save some loved space&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="捕获异常">捕获异常&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="nd">@logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">catch&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">my_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># An error? It&amp;#39;s caught anyway!&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="为日志添加颜色">为日志添加颜色&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">colorize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">format&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;green&amp;gt;&lt;/span>&lt;span class="si">{time}&lt;/span>&lt;span class="s2">&amp;lt;/green&amp;gt; &amp;lt;level&amp;gt;&lt;/span>&lt;span class="si">{message}&lt;/span>&lt;span class="s2">&amp;lt;/level&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="异步线程安全多进程安全">异步、线程安全、多进程安全&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;file.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">enqueue&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="完全描述异常">完全描述异常&lt;/h3>
&lt;blockquote>
&lt;p>记录代码中发生的异常对于跟踪错误很重要，但是如果您不知道为什么失败，则记录日志就毫无用处。
Loguru通过允许显示整个堆栈跟踪（包括变量值）来帮助您发现问题&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;output.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backtrace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">diagnose&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Set &amp;#39;False&amp;#39; to not leak sensitive data in prod&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置到flask">配置到flask&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">logging&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">pathlib&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Path&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">flask&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Flask&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Flask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">InterceptHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">logger_opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">opt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">depth&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exception&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exc_info&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">logger_opt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">levelname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getMessage&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">configure_logging&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flask_app&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Flask&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;配置日志&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flask_app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;LOG_PATH&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mkdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parents&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">log_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;sips.log&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">basicConfig&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handlers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">InterceptHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">level&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;INFO&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;INFO&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handlers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[{&lt;/span>&lt;span class="s2">&amp;#34;sink&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;level&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;INFO&amp;#39;&lt;/span>&lt;span class="p">}])&lt;/span> &lt;span class="c1"># 配置日志到标准输出流&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">log_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rotation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;500 MB&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">colorize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;INFO&amp;#39;&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="c1"># 配置日志到输出到文件&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Eventlet使用</title><link>https://huangkai1008.github.io/p/eventlet%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 22 Nov 2019 11:20:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/eventlet%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>Evenlet是一个Python的基于携程的网络库，它改变了你代码运行的方式，但是没有改变你怎么写代码&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">pip install eventlet
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="简单使用">简单使用&lt;/h2>
&lt;h3 id="从eventletgreen导入相关库">从eventlet.green导入相关库&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">eventlet&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">eventlet.green&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">urllib2&lt;/span>
&lt;span class="n">urls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;https://www.google.com/intl/en_ALL/images/logo.gif&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;http://python.org/images/python-logo.gif&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;http://us.i1.yimg.com/us.yimg.com/i/ww/beta/y3.gif&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;opening&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">urllib2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;done with&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">body&lt;/span>
&lt;span class="n">pool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eventlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">GreenPool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">body&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fetch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">urls&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;got body from&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;of length&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用spawn使用协程">使用spawn使用协程&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">eventlet&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">green_thread_1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">eventlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">greenthread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;green_thread_1 get result &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">green_thread_2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">eventlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">greenthread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;green_thread_2 get result &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">y&lt;/span>
&lt;span class="n">time1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">perf_counter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eventlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">green_thread_1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eventlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">green_thread_2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">time2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">perf_counter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time2&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">time1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">green_thread_1&lt;/span> &lt;span class="n">get&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">green_thread_2&lt;/span> &lt;span class="n">get&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="mf">2.0049271&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;code>spawn&lt;/code>函数产生的协程可以通过&lt;code>wait&lt;/code>函数来执行并获取返回结果， 如上例子中， 使用绿色线程的休眠模拟io操作的耗时,
程序就会切换到下一个协程，切换协程由调度器决定&lt;/p>
&lt;/blockquote>
&lt;h3 id="使用monkey-patch">使用monkey-patch&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">eventlet&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">monkey_patch&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">eventlet&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">GreenPool&lt;/span>
&lt;span class="n">green_pool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GreenPool&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">monkey_patch&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">producer&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">consumer&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">green_pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">green_pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">consumer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">green_pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">waitall&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="和gunicorn一起使用">和gunicorn一起使用&lt;/h3>
&lt;p>以flask应用为例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">gunicorn --worker-class eventlet -b 0.0.0.0:5000 -w &lt;span class="m">1&lt;/span> run:app
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Git工作流</title><link>https://huangkai1008.github.io/p/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Sat, 12 Oct 2019 14:36:49 +0800</pubDate><guid>https://huangkai1008.github.io/p/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>&lt;h2 id="gitflow">GitFlow&lt;/h2>
&lt;h3 id="基本介绍">基本介绍&lt;/h3>
&lt;p>Gitflow 提倡使用 &lt;code>feature branches&lt;/code> 模式来开发各个相互独立的功能，同时分成不同的分支以便进行集成和发布&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413133752.jpg" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413133752.jpg"
loading="lazy"
alt="Git Workflow">
&lt;/a>
&lt;figcaption>Git Workflow&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="分支介绍">分支介绍&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>长期分支&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>主分支(master)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开发分支(develop)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在gitflow下, &lt;code>develop&lt;/code> 分支是一个类似全能的分支，用来存放、测试所有的代码，同时也是主要是用来合并代码、集成功能的分支&lt;/p>
&lt;p>作为一个开发人员，在这是不允许直接提交代码到 &lt;code>develop&lt;/code> 分支上的，更更更不允许直接提交到 &lt;code>master&lt;/code> 分支。&lt;code>master&lt;/code> 分支代表的是一个「stable」的分支，包含的是已投产或即将投产的代码。如果一段代码在 &lt;code>master&lt;/code> 分支上，即代表它已经投产或即将投产发布&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>短期分支&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>功能分支(feature)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>热补丁分支(hotfix)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>预发分支(release)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>&lt;code>feature&lt;/code>&lt;/p>
&lt;p>功能性分支从 &lt;code>develop&lt;/code> 分支上产生， 根据新需求来新建 &lt;code>feature&lt;/code> 分支， 开发完成后，要再并入 &lt;code>develop&lt;/code> 分支， 合并完分支后一般会删除这个&lt;code>feature&lt;/code>分支&lt;/p>
&lt;p>在 &lt;code>feature&lt;/code> 分支的命名规则上，可以约定以 「feat-」开头，后面跟上问题单编号。如「feat-APS-151-add-name-field」。以「feat-」开头，可以让 CI 服务器识别出这是一个 &lt;code>feature&lt;/code> 分支，「APS-151」是Jira 问题单的编号，可以链接到问题单，剩下的部分则是对该功能的简短的说明&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>release&lt;/code>&lt;/p>
&lt;p>&lt;code>release&lt;/code>分支基于&lt;code>develop&lt;/code>创建&lt;/p>
&lt;p>打完&lt;code>release&lt;/code>分支之后，我们可以在这个&lt;code>release&lt;/code>分支上测试，修改bug等。同时，其它开发人员可以基于&lt;code>develop&lt;/code>分支新建&lt;code>feature&lt;/code> (记住：一旦打了&lt;code>release&lt;/code>分支之后不要从&lt;code>develop&lt;/code>分支上合并新的改动到&lt;code>release&lt;/code>分支)发布&lt;code>release&lt;/code>分支时，合并&lt;code>release&lt;/code>到&lt;code>master&lt;/code>和&lt;code>develop&lt;/code>， 同时在master分支上打个tag记住release版本号，然后可以删除release分支了。它的命名，可以采用release-*的形式&lt;/p>
&lt;p>在测试中，难免发现 bug，我们可以直接在 release 分支上修改，修改完后再 merge 到 develop 分支上（develop 分支包含的是已发布或者即将发布的代码）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>hotfix&lt;/code>&lt;/p>
&lt;p>这个分支是负责在生产环境上发现的问题，如 bug 或者性能问题等。 hotfixes 分支和 release 分支类似，都以 release 版本号命名，唯一的区别就是 hotfixes 是新建于 master 分支，release 分支则是从 develop 分支而来，修补结束以后，再合并进Master和Develop分支。它的命名，可以采用hotfix-*的形式&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p></description></item><item><title>Black安装和使用</title><link>https://huangkai1008.github.io/p/black%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 27 Sep 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/black%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>Black是一个毫不妥协的python代码格式化工具, 特点是可配置项较少
Black依赖于python3.6+, 官方地址在https://github.com/psf/black&lt;/p>
&lt;h2 id="install">Install&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">pip install black
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configure">Configure&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>pyproject.toml&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">black&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">skip-string-normalization&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="c"># 禁用双引号风格&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>pycharm&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Create external tools&lt;/p>
&lt;blockquote>
&lt;p>windows: File -&amp;gt; Settings -&amp;gt; Tools -&amp;gt; External Tools&lt;/p>
&lt;/blockquote>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413134138.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413134138.png"
loading="lazy"
alt="External Tools">
&lt;/a>
&lt;figcaption>External Tools&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Configure file watcher&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413134203.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413134203.png"
loading="lazy"
alt="File Watcher">
&lt;/a>
&lt;figcaption>File Watcher&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Poetry安装和使用</title><link>https://huangkai1008.github.io/p/poetry%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 14 Sep 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/poetry%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description>&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>custom installer&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py &lt;span class="p">|&lt;/span> python
&lt;span class="nb">source&lt;/span> &lt;span class="nv">$HOME&lt;/span>/.poetry/env
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>pip&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">pip install poetry &lt;span class="c1"># 不推荐, 可能会有冲突&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>验证安装&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">poetry --version
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用">使用&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>项目初始化&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从pipenv/pip等工具迁移&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">poetry init &lt;span class="c1"># 进入交互式命令行填写项目信息, 会生成pyproject.toml&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;strong>添加依赖&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>添加包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">poetry add
poetry add &lt;span class="nv">fastapi&lt;/span>&lt;span class="o">=&lt;/span>0.38.1 -E all &lt;span class="c1"># pipenv install fastapi[all]&lt;/span>
poetry add celery --extras &lt;span class="s2">&amp;#34;librabbitmq redis auth msgpack&amp;#34;&lt;/span> &lt;span class="c1"># pip install &amp;#34;celery[librabbitmq,redis,auth,msgpack]&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>依赖安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">poetry install &lt;span class="c1"># 会从pyproject.toml文件里读取, 如果有poetry.lock文件则会从lock文件中读取锁定依赖并安装&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>虚拟环境地址&lt;/p>
&lt;ul>
&lt;li>&lt;strong>windows10&lt;/strong>: $User\AppData\Local\pypoetry\Cache\virtualenvs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="配置">配置&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>添加源&lt;/strong>&lt;/p>
&lt;p>修改pyproject.toml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;tsinghua&amp;#34;&lt;/span>
&lt;span class="nx">url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;https://pypi.tuna.tsinghua.edu.cn/simple/&amp;#34;&lt;/span>
&lt;span class="nx">verify_ssl&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="完整的实例">完整的实例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;market-admin&amp;#34;&lt;/span>
&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.1.0&amp;#34;&lt;/span>
&lt;span class="nx">description&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;market-admin is a Market background management system with fastapi&amp;#34;&lt;/span>
&lt;span class="nx">authors&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;huangkai&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">license&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;MIT&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">python&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^3.7&amp;#34;&lt;/span>
&lt;span class="nx">fastapi&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.38.1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">extras&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;all&amp;#34;&lt;/span>&lt;span class="p">]}&lt;/span>
&lt;span class="nx">python-dotenv&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.10.2&amp;#34;&lt;/span>
&lt;span class="nx">tortoise-orm&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.13.5&amp;#34;&lt;/span>
&lt;span class="nx">aiomysql&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.0.20&amp;#34;&lt;/span>
&lt;span class="nx">loguru&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^0.3.2&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dev-dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">pytest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;6.2.1&amp;#34;&lt;/span>
&lt;span class="nx">coverage&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;5.3.1&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">black&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c"># Black工具配置&lt;/span>
&lt;span class="nx">target-version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;py37&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">skip-string-normalization&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">[[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="c"># 源配置&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;tsinghua&amp;#34;&lt;/span>
&lt;span class="nx">url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;https://pypi.tuna.tsinghua.edu.cn/simple/&amp;#34;&lt;/span>
&lt;span class="nx">default&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">build-system&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">requires&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;poetry&amp;gt;=0.12&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">build-backend&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;poetry.masonry.api&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Nginx安装和基本使用</title><link>https://huangkai1008.github.io/p/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 26 Aug 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。
其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。
Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强&lt;/p>
&lt;h2 id="install">Install&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>platform: Centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>version: 7.2&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">wget http://nginx.org/download/nginx-1.16.1.tar.gz
tar -zxvf nginx-1.16.1.tar.gz
&lt;span class="nb">cd&lt;/span> nginx-1.16.1
sudo ./configure &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install
whereis nginx &lt;span class="c1"># 查看nginx安装地址 /usr/local/nginx&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="basicuse">BasicUse&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>重启&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">cd&lt;/span> /usr/local/nginx/sbin
./nginx -s reload
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="example-conf">Example Conf&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="c1"># /usr/local/nginx/conf/nginx.conf
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">#user nobody;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">worker_processes&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#error_log logs/error.log;
&lt;/span>&lt;span class="c1">#error_log logs/error.log notice;
&lt;/span>&lt;span class="c1">#error_log logs/error.log info;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">#pid logs/nginx.pid;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">events&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">worker_connections&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">http&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">include&lt;/span> &lt;span class="s">mime.types&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">default_type&lt;/span> &lt;span class="s">application/octet-stream&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#log_format main &amp;#39;$remote_addr - $remote_user [$time_local] &amp;#34;$request&amp;#34; &amp;#39;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># &amp;#39;$status $body_bytes_sent &amp;#34;$http_referer&amp;#34; &amp;#39;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># &amp;#39;&amp;#34;$http_user_agent&amp;#34; &amp;#34;$http_x_forwarded_for&amp;#34;&amp;#39;;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">#access_log logs/access.log main;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kn">sendfile&lt;/span> &lt;span class="no">on&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#tcp_nopush on;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">#keepalive_timeout 0;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">keepalive_timeout&lt;/span> &lt;span class="mi">65&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#gzip on;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># 包含aps的nginx配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">include&lt;/span> &lt;span class="s">/usr/local/nginx/conf/aps/*.conf&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">server&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">listen&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">server_name&lt;/span> &lt;span class="s">localhost&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#charset koi8-r;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">#access_log logs/host.access.log main;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kn">location&lt;/span> &lt;span class="s">/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">root&lt;/span> &lt;span class="s">html&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">index&lt;/span> &lt;span class="s">index.html&lt;/span> &lt;span class="s">index.htm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">#error_page 404 /404.html;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># redirect server error pages to the static page /50x.html
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">error_page&lt;/span> &lt;span class="mi">500&lt;/span> &lt;span class="mi">502&lt;/span> &lt;span class="mi">503&lt;/span> &lt;span class="mi">504&lt;/span> &lt;span class="s">/50x.html&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">location&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">/50x.html&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">root&lt;/span> &lt;span class="s">html&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1"># proxy the PHP scripts to Apache listening on 127.0.0.1:80
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#location ~ \.php$ {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># proxy_pass http://127.0.0.1;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#}
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#location ~ \.php$ {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># root html;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># fastcgi_pass 127.0.0.1:9000;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># fastcgi_index index.php;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># include fastcgi_params;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#}
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># deny access to .htaccess files, if Apache&amp;#39;s document root
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># concurs with nginx&amp;#39;s one
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#location ~ /\.ht {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># deny all;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#}
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1"># another virtual host using mix of IP-, name-, and port-based configuration
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#server {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># listen 8000;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># listen somename:8080;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># server_name somename alias another.alias;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># location / {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># root html;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># index index.html index.htm;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#}
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># HTTPS server
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#server {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># listen 443 ssl;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># server_name localhost;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># ssl_certificate cert.pem;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># ssl_certificate_key cert.key;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># ssl_session_cache shared:SSL:1m;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># ssl_session_timeout 5m;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># ssl_ciphers HIGH:!aNULL:!MD5;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># ssl_prefer_server_ciphers on;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># location / {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># root html;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># index index.html index.htm;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#}
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="c1"># /usr/local/nginx/conf/aps/aps.conf
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">server&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">listen&lt;/span> &lt;span class="mi">10050&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">server_name&lt;/span> &lt;span class="s">localhost&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 访问后端api
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">location&lt;/span> &lt;span class="s">/api/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">proxy_pass&lt;/span> &lt;span class="s">http://127.0.0.1:5500/&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">Host&lt;/span> &lt;span class="nv">$host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">X-Real-IP&lt;/span> &lt;span class="nv">$remote_addr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">X-Forwarded-For&lt;/span> &lt;span class="nv">$proxy_add_x_forwarded_for&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1"># 访问静态文件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">location&lt;/span> &lt;span class="s">/static/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">alias&lt;/span> &lt;span class="s">/usr/local/nginx/html/aps/dist/&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># 静态文件访问硬盘
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1"># 访问主页
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">location&lt;/span> &lt;span class="s">/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">root&lt;/span> &lt;span class="s">/usr/local/nginx/html/aps/dist/&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">index&lt;/span> &lt;span class="s">index.html&lt;/span> &lt;span class="s">index.htm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Manjaro安装配置</title><link>https://huangkai1008.github.io/p/manjaro%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 01 Aug 2019 22:21:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/manjaro%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="基本安装">基本安装&lt;/h2>
&lt;ol>
&lt;li>使用&lt;code>rufus&lt;/code>以dd模式写入U盘&lt;/li>
&lt;li>从u盘启动&lt;/li>
&lt;li>将manjaro启动项中的&lt;code>driver&lt;/code>和&lt;code>boot&lt;/code>添加或修改&lt;code>driver=intel&lt;/code>才能进入安装界面(双显卡笔记本)&lt;/li>
&lt;li>安装系统, 注意不要联网, 否则容易卡在安装&lt;/li>
&lt;li>reboot进入系统&lt;/li>
&lt;li>manjaro启动项中quiet后增加&lt;code>nouveau.modeset=0&lt;/code>(双显卡)&lt;/li>
&lt;/ol>
&lt;h2 id="双显卡使用prime管理连接外接显示器">双显卡使用prime管理连接外接显示器&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>删除bumblebee或者开源驱动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mhwd -r pci nonfree &lt;span class="m">0300&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装nvidia私有闭源驱动&lt;/p>
&lt;ul>
&lt;li>
&lt;p>方法一:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mhwd -i pci video-nvidia
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mhwd -i pci video-nvidia-390xx &lt;span class="c1"># 390xx或者435xx, 数字是驱动版本...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>方法二
&lt;code>系统设置-硬件设定&lt;/code>中右键安装&lt;code>video-nvidia-390xx&lt;/code>之类的驱动&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>安装依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo pacman -S linuxXXX-headers acpi_call-dkms xorg-xrandr xf86-video-intel git
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注: XXX 为内核版本， 本来我的5.3有点问题，降级成4.19才可以，以4.19为例便是
&lt;code>linux419-headers&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>注入&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo modprobe acpi_call
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用github上的脚本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">cd&lt;/span> ~ &lt;span class="c1"># 建议在用户目录下操作&lt;/span>
git clone https://github.com/dglt1/optimus-switch-sddm.git
&lt;span class="nb">cd&lt;/span> optimus-switch-sddm
chmod +x install.sh
sudo ./install.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>reboot&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Git Commit Message编写规范</title><link>https://huangkai1008.github.io/p/git-commit-message%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</link><pubDate>Fri, 12 Jul 2019 14:14:15 +0800</pubDate><guid>https://huangkai1008.github.io/p/git-commit-message%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</guid><description>&lt;p>Git提交代码时需要提交Message, 为了使得提交信息更清晰明了, 需要确定规范&lt;/p>
&lt;p>现在比较流行的规范是Angular规范, 也根据此规范衍生了Conventional Commits specification&lt;/p>
&lt;h2 id="规范">规范&lt;/h2>
&lt;h3 id="格式">&lt;strong>格式&lt;/strong>&lt;/h3>
&lt;pre>&lt;code> &amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;footer&amp;gt;
&lt;/code>&lt;/pre>&lt;p>按照空行分割为三个部分, 分别为&lt;strong>Header&lt;/strong>，&lt;strong>Body&lt;/strong> 和 &lt;strong>Footer&lt;/strong>
其中，Header 是必需的，Body 和 Footer 可以省略
不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）, 这是为了避免自动换行影响美观&lt;/p>
&lt;h3 id="组成">&lt;strong>组成&lt;/strong>&lt;/h3>
&lt;h4 id="header">&lt;strong>Header&lt;/strong>&lt;/h4>
&lt;p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）&lt;/p>
&lt;ol>
&lt;li>
&lt;p>type&lt;/p>
&lt;p>​type用于说明 commit 的类别，只允许使用下面7个标识&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>feat：新功能（feature）&lt;/li>
&lt;li>fix：修补bug&lt;/li>
&lt;li>docs：文档（documentation）&lt;/li>
&lt;li>style： 格式（不影响代码运行的变动）&lt;/li>
&lt;li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）&lt;/li>
&lt;li>test：增加测试&lt;/li>
&lt;li>chore：构建过程或辅助工具的变动&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;em>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>scope&lt;/p>
&lt;p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同&lt;/p>
&lt;/li>
&lt;li>
&lt;p>subject&lt;/p>
&lt;p>subject是 commit 目的的简短描述，不超过50个字符&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes&lt;/li>
&lt;li>第一个字母小写&lt;/li>
&lt;li>结尾不加句号&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h4 id="body">&lt;strong>Body&lt;/strong>&lt;/h4>
&lt;p>Body 部分是对本次 commit 的详细描述，可以分成多行&lt;/p>
&lt;blockquote>
&lt;p>使用第一人称现在时，比如使用change而不是changed或changes&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>应该说明代码变动的动机，以及与以前行为的对比&lt;/p>
&lt;/blockquote>
&lt;h4 id="footer">&lt;strong>Footer&lt;/strong>&lt;/h4>
&lt;p>Footer部分可以用于表达&lt;strong>不兼容变动&lt;/strong>和&lt;strong>关闭Issue&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>不兼容变动&lt;/p>
&lt;p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关闭Issue&lt;/p>
&lt;blockquote>
&lt;p>Closes APS-151&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="jetbrains工具配置">Jetbrains工具配置&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>git commit template&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>提交信息模板&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Gitmoji&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>添加emoji表情在commit信息中&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>值得关注的Python库</title><link>https://huangkai1008.github.io/p/%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84python%E5%BA%93/</link><pubDate>Mon, 27 May 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84python%E5%BA%93/</guid><description>&lt;h2 id="web-frameworks">Web Frameworks&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/encode/uvicorn" target="_blank" rel="noopener"
>Uvicorn&lt;/a> &lt;em>基于asyncio开发的一个轻量级高效的 web 服务器框架&lt;/em>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/encode/starlette" target="_blank" rel="noopener"
>Starlette&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://gitlab.com/pgjones/quart" target="_blank" rel="noopener"
>Quart&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://python-responder.org" target="_blank" rel="noopener"
>Responder&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/tiangolo/fastapi" target="_blank" rel="noopener"
>&lt;code>Fastapi&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/huge-success/sanic" target="_blank" rel="noopener"
>Sanic&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="utils">Utils&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/sdispater/poetry" target="_blank" rel="noopener"
>Poetry&lt;/a> &lt;em>新的Python依赖包管理工具&lt;/em>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/pypa/pipenv" target="_blank" rel="noopener"
>Pipenv&lt;/a> &lt;em>用了很久的现在也在用的&amp;hellip; 有时候Locking速度感人, pipfile声明版本可以防止很多坑&lt;/em>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/psf/black" target="_blank" rel="noopener"
>Black&lt;/a> &lt;em>代码格式化库&lt;/em>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Delgan/loguru" target="_blank" rel="noopener"
>Loguru&lt;/a> &lt;em>python日志库&lt;/em>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/cool-RR/PySnooper" target="_blank" rel="noopener"
>PySnooper&lt;/a> &lt;em>python Debugger&lt;/em>&lt;/li>
&lt;/ul>
&lt;h2 id="orm">ORM&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://python-gino.org/" target="_blank" rel="noopener"
>Gino&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://tortoise.github.io/" target="_blank" rel="noopener"
>tortoise-orm&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="test">Test&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/locustio/locust" target="_blank" rel="noopener"
>locust&lt;/a> &lt;em>压力测试工具&lt;/em>&lt;/li>
&lt;/ul>
&lt;h2 id="environment">Environment&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/theskumar/python-dotenv" target="_blank" rel="noopener"
>python-dotenv&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/sloria/environs" target="_blank" rel="noopener"
>environs&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Spring初始化工具</title><link>https://huangkai1008.github.io/p/spring%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E5%85%B7/</link><pubDate>Thu, 07 Feb 2019 11:15:10 +0800</pubDate><guid>https://huangkai1008.github.io/p/spring%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E5%85%B7/</guid><description>&lt;h2 id="使用idea初始化spring-boot项目">使用IDEA初始化Spring Boot项目&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>选择&lt;code>File&lt;/code> -&amp;gt; &lt;code>New&lt;/code> -&amp;gt; &lt;code>Project&lt;/code> 新建项目&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择&lt;code>Spring Initializr&lt;/code>， 点击&lt;code>Next&lt;/code>，填写项目基本信息
&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413134322.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413134322.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>项目依赖勾选&lt;code>Spring Web&lt;/code>选择&lt;code>Finish&lt;/code>等待项目构建&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413134345.png" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413134345.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​&lt;/p></description></item><item><title>RabbitMQ基础安装使用</title><link>https://huangkai1008.github.io/p/rabbitmq%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 12 Nov 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/rabbitmq%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid><description>&lt;h2 id="rabbitmq">RabbitMQ&lt;/h2>
&lt;ul>
&lt;li>Platform: Centos7&lt;/li>
&lt;/ul>
&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>install Erlang&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">yum install erlang
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>install rabbitMQ&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># rpm安装&lt;/span>
wget https://github.com/rabbitmq/rabbitmq-server/releases/download/rabbitmq_v3_6_14/rabbitmq-server-3.6.14-1.el7.noarch.rpm
yum install rabbitmq-server-3.6.14-1.el7.noarch.rpm
&lt;span class="c1"># yum安装&lt;/span>
yum install rabbitmq-server
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="配置">配置&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>启动远程访问&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[{&lt;/span>rabbit,
&lt;span class="o">[&lt;/span>
&lt;span class="o">{&lt;/span>loopback_users, &lt;span class="o">[]}&lt;/span>
&lt;span class="o">]}]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装插件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">/sbin/rabbitmq-plugins &lt;span class="nb">enable&lt;/span> rabbitmq_management
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="使用">使用&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>服务命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">systemctl start rabbitmq-server.service &lt;span class="c1"># 启动&lt;/span>
systemctl status rabbitmq-server.service &lt;span class="c1"># 查看状态&lt;/span>
systemctl restart rabbitmq-server.service &lt;span class="c1"># 重启&lt;/span>
systemctl &lt;span class="nb">enable&lt;/span> rabbitmq-server.service &lt;span class="c1"># 开机自启&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加用户&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">rabbitmqctl add_user root root123 &lt;span class="c1"># 添加新用户，用户名为 &amp;#34;root&amp;#34; ，密码为 &amp;#34;root123&amp;#34;&lt;/span>
rabbitmqctl set_permissions -p / root &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="c1"># 为root用户添加所有权限&lt;/span>
rabbitmqctl set_user_tags root administrator &lt;span class="c1"># 设置root 用户为管理员角色&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>访问web页面&lt;/p>
&lt;pre>&lt;code>http://ip:15672
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul></description></item><item><title>Mysql优化</title><link>https://huangkai1008.github.io/p/mysql%E4%BC%98%E5%8C%96/</link><pubDate>Tue, 06 Nov 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E4%BC%98%E5%8C%96/</guid><description>&lt;h2 id="mysql中min和max查询优化">mysql中min和max查询优化&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>max()&lt;/code>函数需扫描where条件过滤后的所有行&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>慎用&lt;code>max()&lt;/code>函数，特别是频繁执行的sql，若需用到可转化为&lt;code>order by id desc limit 1&lt;/code>&lt;/p>
&lt;/blockquote></description></item><item><title>Redis安装配置</title><link>https://huangkai1008.github.io/p/redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 11 Oct 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="redis-安装">Redis 安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Platform: centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>version: 5.0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">wget http://download.redis.io/releases/redis-5.0.0.tar.gz &lt;span class="c1"># 获取包&lt;/span>
tar -zxvf redis-5.0.0.tar.gz
mv redis-5.0.0 /usr/local/redis
make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="redis配置">Redis配置&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>设置配置文件目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">mkdir -p /etc/redis
cp redis.conf /etc/redis
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">vim /etc/redis/redis.conf
daemonize yes &lt;span class="o">(&lt;/span>no -&amp;gt; yes&lt;span class="o">)&lt;/span> &lt;span class="c1"># 守护进程&lt;/span>
&lt;span class="nb">bind&lt;/span> 0.0.0.0 &lt;span class="o">(&lt;/span>127.0.0.1 -&amp;gt; 0.0.0.0&lt;span class="o">)&lt;/span> &lt;span class="c1"># 远程登录&lt;/span>
protected-mode no &lt;span class="o">(&lt;/span>yes -&amp;gt; no&lt;span class="o">)&lt;/span> &lt;span class="c1"># 关闭保护模式/或者添加密码&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="redis使用">Redis使用&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">/usr/local/bin/redis-server /etc/redis/redis.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">ps -ef &lt;span class="p">|&lt;/span> grep redis
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>客户端使用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">redis-cli &lt;span class="c1"># 进入&lt;/span>
127.0.0.1:6379&amp;gt;set name Huang
Ok
redis-cli shutdown &lt;span class="c1"># 关闭客户端&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>开机启动配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 开机启动要配置在 rc.local 中，而 /etc/profile 文件，要有用户登录了，才会被执行。&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;/usr/local/bin/redis-server /etc/redis/redis.conf &amp;amp;&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/rc.local
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="supervisor管理redis">Supervisor管理Redis&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>更改redis配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">vim /etc/redis/redis.conf
daemonize no &lt;span class="o">(&lt;/span>yes -&amp;gt; no&lt;span class="o">)&lt;/span> &lt;span class="c1"># 取消守护进程&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建supervisor对redis的配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">vim /etc/supervisord.d/redis.ini
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> `redis.ini`文件如下
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span>program:redis&lt;span class="o">]&lt;/span>
&lt;span class="nv">command&lt;/span>&lt;span class="o">=&lt;/span>redis-server /etc/redis/redis.conf &lt;span class="c1"># 启动Redis的命令&lt;/span>
&lt;span class="nv">autostart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> &lt;span class="c1"># supervisord启动时，该程序也启动&lt;/span>
&lt;span class="nv">autorestart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> &lt;span class="c1"># 异常退出时，自动启动&lt;/span>
&lt;span class="nv">startsecs&lt;/span>&lt;span class="o">=&lt;/span>3 &lt;span class="c1"># 启动后持续3s后未发生异常，才表示启动成功 &lt;/span>
&lt;span class="nv">stdout_logfile&lt;/span>&lt;span class="o">=&lt;/span>/var/log/supervisor/redis/redis.log &lt;span class="c1"># 标准输出流日志&lt;/span>
&lt;span class="nv">stderr_logfile&lt;/span>&lt;span class="o">=&lt;/span>/var/log/supervisor/redis/redis_err.log &lt;span class="c1"># 标准错误输出流日志&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul></description></item><item><title>Angular Starter</title><link>https://huangkai1008.github.io/p/angular-starter/</link><pubDate>Tue, 09 Oct 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/angular-starter/</guid><description>&lt;h2 id="安装angular">安装Angular&lt;/h2>
&lt;h3 id="确保nodenpm已安装">确保node/npm已安装&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">node -v 查看node版本
npm -v 查看npm版本
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装typescript">安装typescript&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">npm install -g typescript
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装angular-cli">安装Angular CLI&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">npm install -g @angular/cli
ng version &lt;span class="c1"># 验证angular-cli版本&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="建立一个新的angular项目">建立一个新的Angular项目&lt;/h2>
&lt;p>Angular CLI 为我们提供了两种方式，用于创建新的应用程序：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ng init&lt;/code> - 在当前目录创建新的应用程序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ng new&lt;/code> - 创建新的目录，然后在新建的目录中运行 ng init 命令&lt;/p>
&lt;p>因此 &lt;code>ng new&lt;/code> 与 &lt;code>ng init&lt;/code> 的功能是相似的，只是 &lt;code>ng new&lt;/code> 会为我们创建新的目录&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="创建应用">创建应用&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">ng new my-app
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="可用选项">可用选项&lt;/h3>
&lt;ul>
&lt;li>&lt;code>--dry-run&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 若设置 &lt;code>dry-run&lt;/code> 则不会创建任何文件&lt;/li>
&lt;li>&lt;code>--verbose&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>&lt;/li>
&lt;li>&lt;code>--link-cli&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 自动链接到 &lt;code>@angular/cli&lt;/code> 包&lt;/li>
&lt;li>&lt;code>--skip-install&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示跳过 &lt;code>npm install&lt;/code>&lt;/li>
&lt;li>&lt;code>--skip-git&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示该目录不初始化为 git 仓库&lt;/li>
&lt;li>&lt;code>--skip-tests&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示不创建 tests 相关文件&lt;/li>
&lt;li>&lt;code>--skip-commit&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示不进行初始提交&lt;/li>
&lt;li>&lt;code>--directory&lt;/code>: string, 用于设置创建的目录名，默认与应用程序的同名&lt;/li>
&lt;li>&lt;code>--source-dir&lt;/code>: string, 默认为 &lt;code>'src'&lt;/code>, 用于设置源文件目录的名称&lt;/li>
&lt;li>&lt;code>--style&lt;/code>: string, 默认为 &lt;code>'css'&lt;/code>, 用于设置选用的样式语法 (&lt;code>'css'&lt;/code>, &lt;code>'less'&lt;/code> or &lt;code>'scss'&lt;/code>)&lt;/li>
&lt;li>&lt;code>--prefix&lt;/code>: string, 默认为 &lt;code>'app'&lt;/code>, 用于设置创建新组件时，组件选择器使用的前缀&lt;/li>
&lt;li>&lt;code>--mobile&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>,表示是否生成 Progressive Web App 应用程序&lt;/li>
&lt;li>&lt;code>--routing&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示新增带有路由信息的模块，并添加到根模块中&lt;/li>
&lt;li>&lt;code>--inline-style&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示当创建新的应用程序时，使用内联样式&lt;/li>
&lt;li>&lt;code>--inline-template&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示当创建新的应用程序时，使用内联模板&lt;/li>
&lt;/ul></description></item><item><title>MongoDB的安装</title><link>https://huangkai1008.github.io/p/mongodb%E7%9A%84%E5%AE%89%E8%A3%85/</link><pubDate>Wed, 12 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mongodb%E7%9A%84%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>Platform: centos7&lt;/li>
&lt;/ul></description></item><item><title>MariaDB安装</title><link>https://huangkai1008.github.io/p/mariadb%E5%AE%89%E8%A3%85/</link><pubDate>Sun, 09 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mariadb%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="mariadb安装">MariaDB安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>platform&lt;/strong>: Centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Install&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">yum install -y mariadb-server
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="mariadb配置使用">MariaDB配置使用&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Using&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">systemctl start mariadb.service &lt;span class="c1"># 启动&lt;/span>
systemctl &lt;span class="nb">enable&lt;/span> mariadb.service &lt;span class="c1"># 开机自启&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Configure&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>首先是设置密码，会提示先输入密码&lt;/p>
&lt;blockquote>
&lt;p>Enter current password for root (enter for none): &amp;lt;–直接回车&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Set root password? [Y/n] &amp;lt;– 是否设置root用户密码，输入y并回车或直接回车&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>New password: &amp;lt;– 设置root用户的密码&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Re-enter new password: &amp;lt;– 再输入一次你设置的密码&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>其他配置&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Remove anonymous users? [Y/n] &amp;lt;– 是否删除匿名用户，Y回车&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Disallow root login remotely? [Y/n] &amp;lt;–是否禁止root远程登录, N回车,&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Remove test database and access to it? [Y/n] &amp;lt;– 是否删除test数据库，Y回车&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Reload privilege tables now? [Y/n] &amp;lt;– 是否重新加载权限表，Y回车2.开启远程访问&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>开启远程访问&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">GRANT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ALL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIVILEGES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="k">IDENTIFIED&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;123456&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">GRANT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OPTION&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>刷新权限&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">flush&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">privileges&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>配置文件地址
&lt;!-- raw HTML omitted -->
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Mysql安装配置</title><link>https://huangkai1008.github.io/p/mysql%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 09 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="mysql安装">Mysql安装&lt;/h2>
&lt;ul>
&lt;li>版本: 8.0&lt;/li>
&lt;li>添加源
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">yum &lt;span class="nb">local&lt;/span> install https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>安装
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">yum install mysql-community-server
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="mysql配置">Mysql配置&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>初始化&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mysqld --initialize --user&lt;span class="o">=&lt;/span>mysql --basedir&lt;span class="o">=&lt;/span>/usr --datadir&lt;span class="o">=&lt;/span>/var/lib/mysql
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动mysql&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">systemctl start mysqld
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>设置mysql开机自启&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">systemctl &lt;span class="nb">enable&lt;/span> mysqld
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看初始密码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash"> grep &lt;span class="s1">&amp;#39;temporary password&amp;#39;&lt;/span> /var/log/mysqld.log
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>进入mysql&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">mysql -u root -p
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改密码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">USER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="s1">&amp;#39;localhost&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">IDENTIFIED&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Huang|12345&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看版本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">version&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+-----------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">version&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+-----------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+-----------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看端口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">global&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">variables&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;port&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+---------------+-------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Variable_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+---------------+-------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3306&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+---------------+-------+&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">04&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>远程访问&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">flush&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">privileges&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>数据库系统概论-介绍</title><link>https://huangkai1008.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA-%E4%BB%8B%E7%BB%8D/</link><pubDate>Sun, 09 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA-%E4%BB%8B%E7%BB%8D/</guid><description>&lt;h2 id="数据库系统的目的purpose-of-database-systems">数据库系统的目的(&lt;code>Purpose of Database Systems&lt;/code>)&lt;/h2>
&lt;p>在早期，数据库应用程序直接建立在文件系统之上，导致一系列的问题&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>数据冗余和不一致&lt;/strong>(&lt;code>Data redundancy and inconsistency&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据访问难度大&lt;/strong>(&lt;code>Difficulty in accessing data&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据隔离&lt;/strong>(&lt;code>Data isolation&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>完整性问题&lt;/strong>(&lt;code>Integrity problems&lt;/code>)&lt;/p>
&lt;blockquote>
&lt;p>完整性约束(&lt;code>Integrity constraints&lt;/code>)问题&lt;/p>
&lt;p>难以添加新约束和修改约束&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原子性更新&lt;/strong>(&lt;code>Atomicity of updates&lt;/code>)&lt;/p>
&lt;blockquote>
&lt;p>更新失败可能会导致数据库的数据处于不一致的状态，或者只更新了部分数据&lt;/p>
&lt;p>例如: 从一方转账给另一方，只会有完成转账和完全没发生转账两种情况，不会出现转账方转账了但是收款方未收到款项的问题&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多用户并发访问&lt;/strong>(&lt;code>Concurrent access by multiple users&lt;/code>)&lt;/p>
&lt;blockquote>
&lt;p>并发访问需要高性能的支持， 而不受控制的并发访问可能会导致数据不一致&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全问题&lt;/strong>(&lt;code>Security problems&lt;/code>)&lt;/p>
&lt;blockquote>
&lt;p>文件系统难以提供安全保障&lt;/p>
&lt;/blockquote>
&lt;p>数据库系统就是为了解决这些问题产生的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="数据模型data-models">数据模型(&lt;code>Data Models&lt;/code>)&lt;/h2>
&lt;h3 id="组成">组成&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>一系列用于描述的工具&lt;/strong>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>数据(&lt;code>Data&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据关系(&lt;code>Data relationships&lt;/code>)&lt;/p>
&lt;ul>
&lt;li>数据语义(&lt;code>Data semantics&lt;/code>)&lt;/li>
&lt;li>数据约束(&lt;code>Data constraints&lt;/code>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>&lt;strong>关系模型&lt;/strong>(&lt;code>Relational model&lt;/code>)&lt;/li>
&lt;li>&lt;strong>实体关系数据模型&lt;/strong>(&lt;code>Entity-Relationship data model&lt;/code> 主要用于数据库设计)&lt;/li>
&lt;li>&lt;strong>基于对象的数据模型&lt;/strong>(&lt;code>Object-based data models (Object-oriented and Object-relational)&lt;/code>)&lt;/li>
&lt;li>&lt;strong>半结构化数据模型&lt;/strong>(&lt;code>Semi-structured data model (XML)&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h2 id="数据视图view-of-data">数据视图(&lt;code>View of Data&lt;/code>)&lt;/h2>
&lt;p>一个数据库系统的结构如下图
&lt;figure
>
&lt;a href="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413133615.svg" >
&lt;img src="https://blog-1259169620.cos.ap-guangzhou.myqcloud.com/img/20210413133615.svg"
loading="lazy"
alt="View of data">
&lt;/a>
&lt;figcaption>View of data&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="模式与实例instances-and-schema">模式与实例(Instances and Schema)&lt;/h3>
&lt;p>类似于编程语言中的类型和变量&lt;/p>
&lt;ul>
&lt;li>&lt;code>逻辑模式(logic schema)&lt;/code> 数据库的总体逻辑结构，类似于程序设计中的变量类型信息&lt;/li>
&lt;li>&lt;code>物理模式(physical schema)&lt;/code> 数据库的总体物理结构&lt;/li>
&lt;li>&lt;code>实例(instance)&lt;/code> 数据库在特定时间点的实际内容， 类似于变量的值&lt;/li>
&lt;/ul>
&lt;h3 id="物理数据独立性physical--data-independence">物理数据独立性(Physical Data Independence)&lt;/h3>
&lt;blockquote>
&lt;p>定义： 在不更改逻辑模式的情况下修改物理模式的能力&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>应用程序依赖于逻辑模式(&lt;code>logic schema&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一般来说，不同级别和组件应该定义得很好，以便在某些部分中进行更改，不严重影响他人&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="数据定义语言data-definition-language">数据定义语言(Data Definition Language)&lt;/h3>
&lt;blockquote>
&lt;p>定义数据库模式的规范表示法&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="w"> &lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">instructor&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">char&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dept_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">numeric&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>DDL编译器生成一组存储表模板信息的数据字典（&lt;code>data dictionary&lt;/code>)&lt;/p>
&lt;p>数据字典包含元信息(&lt;code>metadata&lt;/code>)&lt;/p>
&lt;ul>
&lt;li>数据库模式(&lt;code>database schema&lt;/code>)&lt;/li>
&lt;li>完整性约束(&lt;code>Integrity constraints&lt;/code>)
&lt;ul>
&lt;li>主键&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>授权(&lt;code>Authorization&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h3 id="数据处理语言data-manipulation-language-">数据处理语言(&lt;code>Data Manipulation Language &lt;/code>)&lt;/h3>
&lt;blockquote>
&lt;p>用于访问和更新由适当数据模型组织的数据的语言（查询语言）&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>DML一般分为两种类型
&lt;ul>
&lt;li>Pure&lt;/li>
&lt;li>Commercial
&lt;ul>
&lt;li>例如&lt;code>SQL&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p>
&lt;h3 id="结构化查询语言structured-query-language-sql">结构化查询语言(&lt;code>Structured Query Language&lt;/code>, SQL)&lt;/h3>
&lt;blockquote>
&lt;p>SQL查询语言是非过程的查询将多个表（可能只有一个）作为输入，并始终返回一个表(SQL query language is nonprocedural. A query takes as input several tables (possibly only one) and always returns a single table)&lt;/p>
&lt;/blockquote>
&lt;h3 id="数据库设计database-design">数据库设计(&lt;code>Database Design&lt;/code>)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>逻辑设计(&lt;code>logic design&lt;/code>) &amp;ndash; 决定数据库模式&lt;/p>
&lt;ul>
&lt;li>
&lt;p>业务决定&lt;/p>
&lt;blockquote>
&lt;p>我们应该在数据库中记录哪些属性&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>计算机科学决定&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>我们应该有什么关系模式&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>属性应该如何分布在不同的关系模式中&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>物理设计(&lt;code>physical design&lt;/code>) &amp;ndash; 决定数据库的物理布局&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Golang安装</title><link>https://huangkai1008.github.io/p/golang%E5%AE%89%E8%A3%85/</link><pubDate>Tue, 31 Jul 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/golang%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Platform: Centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>version: 1.12&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">cd&lt;/span> /opt
wget https://studygolang.com/dl/golang/go1.12.4.linux-amd64.tar.gz
tar xzvf go1.12.4.linux-amd64.tar.gz &lt;span class="c1"># 安装&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置环境变量&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">vim ~/.zshrc &lt;span class="c1"># 如果用bash就是vim ~/.bashrc&lt;/span>
&lt;span class="c1"># 追加golang配置&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOROOT&lt;/span>&lt;span class="o">=&lt;/span>/opt/go
&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$PATH&lt;/span>:&lt;span class="nv">$GOROOT&lt;/span>/bin
&lt;span class="c1"># 立即生效&lt;/span>
&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;span class="c1"># 查看版本&lt;/span>
go version
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>扩展Python Json Encoder</title><link>https://huangkai1008.github.io/p/%E6%89%A9%E5%B1%95python-json-encoder/</link><pubDate>Mon, 09 Apr 2018 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%89%A9%E5%B1%95python-json-encoder/</guid><description>&lt;p>Python默认的json模块序列化并不是很全面，只能序列化基本的数据类型, 像一些时间格式或者自定义类型都不能序列化，所以在有些时候需要扩展json模块的json encoder&lt;/p>
&lt;h2 id="扩展">扩展&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">datetime&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">dt&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">decimal&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">json&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">enum&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterator&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ExtendedEncoder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">JSONEncoder&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">default&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strftime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;%Y-%m-&lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s1"> %H:%M:%S&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">date&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strftime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;%Y-%m-&lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">decimal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Decimal&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">enum&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Enum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">JSONEncoder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用场景">使用场景&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>日常格式化&lt;/strong>&lt;/p>
&lt;p>例如对于日期格式的格式化&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">datetime&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">dt&lt;/span>
&lt;span class="n">now&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于now如果使用json.dumps(t_now)便会触发&lt;!-- raw HTML omitted -->TypeError: Object of type datetime is not JSON serializable&lt;!-- raw HTML omitted -->
使用扩展的Encoder&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dumps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">cls&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ExtendedEncoder&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="s1">&amp;#39;2018-04-09 23:04:49&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flask&lt;/strong>&lt;/p>
&lt;p>修改flask类的json_encoder&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">flask&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Flask&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">_Flask&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">QuizFlask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_Flask&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> 自定义flask
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">json_encoder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ExtendedEncoder&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">make_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rv&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">rv&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">rv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">rv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QuizFlask&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">make_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Tortoise-orm&lt;/strong>&lt;/p>
&lt;p>模型jsonfield的encoder&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">json&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">tortoise&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">fields&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">tortoise.models&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Model&lt;/span>
&lt;span class="n">__all__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;OurModel&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">OurModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;示例model&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fields&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">IntField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pk&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cat_ids&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fields&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">JSONField&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">encoder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ExtendedEncoder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">decoder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decoder&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="c1"># JsonField的encoder&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>Python线程池使用</title><link>https://huangkai1008.github.io/p/python%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 08 Feb 2018 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/python%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</guid><description>&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>从Python3.2开始，标准库为我们提供了 concurrent.futures 模块，它提供了 ThreadPoolExecutor (线程池)和ProcessPoolExecutor (进程池)两个类。&lt;/p>
&lt;p>相比 threading 等模块，该模块通过 submit 返回的是一个 future 对象，它是一个未来可期的对象，通过它可以获悉线程的状态主线程(或进程)中可以获取某一个线程(进程)执行的状态或者某一个任务执行的状态及返回值：&lt;/p>
&lt;p>1.主线程可以获取某一个线程（或者任务的）的状态，以及返回值。&lt;/p>
&lt;p>2.当一个线程完成的时候，主线程能够立即知道。&lt;/p>
&lt;p>3.让多线程和多进程的编码接口一致。&lt;/p>
&lt;h2 id="基本使用">基本使用&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">concurrent.futures&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 创建一个最大容纳数量为5的线程池&lt;/span>
&lt;span class="n">task1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">task2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 通过submit提交执行的函数到线程池中&lt;/span>
&lt;span class="n">task3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;task1: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">done&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 通过done来判断线程是否完成&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;task2: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">done&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;task3: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">done&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">2.5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;task1: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">done&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;task2: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">done&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;task3: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">done&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1"># 通过result来获取返回值&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">task1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="n">task2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="n">task3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">task1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="n">task2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="n">task3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="api">Api&lt;/h2>
&lt;h3 id="as_completed">as_completed&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>concurrent.futures.as_completed(fs, timeout=None)&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>返回一个生成器在迭代过程中会阻塞&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>直到线程完成或者异常时,返回一个被set_result的Future对象&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>此方法的返回顺序为哪个线程先失败/完成就返回&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">concurrent.futures&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">as_completed&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 创建一个最大容纳数量为5的线程池&lt;/span>
&lt;span class="n">tasks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">page&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">future&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">as_completed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tasks&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">future&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="mi">2&lt;/span>
&lt;span class="mi">3&lt;/span>
&lt;span class="mi">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="wait">wait&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>concurrent.futures.wait(fs, timeout=None, return_when=ALL_COMPLETED)&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>fs&lt;/strong>: 执行的序列&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>timeout&lt;/strong>: 等待的最大时间，如果超过这个时间即使线程未执行完成也将返回&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>return_when&lt;/strong>: 表示wait返回结果的条件，默认为 ALL_COMPLETED 全部执行完成再返回&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>FIRST_COMPLETED&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre>&lt;code>函数将在任意可等待对象结束或取消时返回。
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;ul>
&lt;li>FIRST_EXCEPTION&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre>&lt;code>函数将在任意可等待对象因引发异常而结束时返回。
当没有引发任何异常时它就相当于 ALL_COMPLETED。
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;ul>
&lt;li>ALL_COMPLETED&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre>&lt;code>函数将在所有可等待对象结束或取消时返回。
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">concurrent.futures&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">wait&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 创建一个最大容纳数量为5的线程池&lt;/span>
&lt;span class="n">tasks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">page&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Future&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x1c071fb1f28&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">finished&lt;/span> &lt;span class="n">returned&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Future&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x1c071fb1d68&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">finished&lt;/span> &lt;span class="n">returned&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Future&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x1c071f9fd68&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">finished&lt;/span> &lt;span class="n">returned&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Future&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x1c071d78278&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">finished&lt;/span> &lt;span class="n">returned&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="map">map&lt;/h3>
&lt;blockquote>
&lt;p>*&lt;em>concurrent.futures.Executor.map(fn, &lt;em>iterables, timeout=None)&lt;/em>&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>fn&lt;/strong>: 第一个参数 fn 是需要线程执行的函数&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>*&lt;strong>iterables&lt;/strong>: 第二个参数接受一个可迭代对象&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>timeout&lt;/strong>: 第三个参数 timeout 跟 wait() 的 timeout 一样，但由于 map 是返回线程执行的结果，如果 timeout小于线程执行时间会抛异常 TimeoutError&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">concurrent.futures&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="n">URLS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">url&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">executor&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 创建一个最大容纳数量为5的线程池&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">URLS&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="mi">2&lt;/span>
&lt;span class="mi">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="回调函数">回调函数&lt;/h2>
&lt;p>回调函数(add_done_callback)是在调用线程完成后再调用的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">concurrent.futures&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">wait&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">call_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;tid: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">current_thread&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ident&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">worker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">tasks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">page&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_done_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">call_back&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tasks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">tid&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6392&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">tid&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">14936&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="n">tid&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12516&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="n">tid&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10524&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="异常处理">异常处理&lt;/h2>
&lt;ul>
&lt;li>通过添加回调函数的方法处理异常&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">logging&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">executor_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;finished&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">worker_exception&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">worker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exception&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">worker_exception&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">worker_exception&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="备注">备注&lt;/h2>
&lt;ul>
&lt;li>一定使用with关键字处理线程池，在某些情况下线程池可能不能自动回收线程资源，with可以避免内存持续增长等情况&lt;/li>
&lt;/ul></description></item><item><title>Docker安装</title><link>https://huangkai1008.github.io/p/docker%E5%AE%89%E8%A3%85/</link><pubDate>Wed, 31 Jan 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/docker%E5%AE%89%E8%A3%85/</guid><description>&lt;ul>
&lt;li>
&lt;p>Platform: centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>version: 5.0&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Uninstall old versions&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo yum remove docker &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-client &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-client-latest &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-common &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-latest &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-latest-logrotate &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-logrotate &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-engine
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Install Docker CE&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo yum install -y yum-utils &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> device-mapper-persistent-data &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> lvm2
&lt;span class="c1"># 设置stable源&lt;/span>
sudo yum-config-manager &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --add-repo &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> https://download.docker.com/linux/centos/docker-ce.repo
&lt;span class="c1"># 安装Docker CE&lt;/span>
sudo yum install docker-ce docker-ce-cli containerd.io
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="启动">启动&lt;/h2>
&lt;ul>
&lt;li>Docker启动
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo systemctl start docker &lt;span class="c1"># 启动Docker&lt;/span>
sudo systemctl status docker &lt;span class="c1"># 查看Docker状态&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>Sqlalchemy使用注意</title><link>https://huangkai1008.github.io/p/sqlalchemy%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</link><pubDate>Wed, 14 Jun 2017 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/sqlalchemy%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</guid><description>&lt;ul>
&lt;li>
&lt;p>遇到in查询之类的批量删除或者更新，可以使用&lt;strong>synchronize_session=False&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">synchronize_session&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用&lt;strong>find_in_set&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">sqlalchemy.sql.expression&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">func&lt;/span>
&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Post&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">find_in_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;10&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag_id&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>批量增加删除&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">db.session.add_all&lt;span class="o">(&lt;/span>instances&lt;span class="o">)&lt;/span>
db.session.delete_all&lt;span class="o">(&lt;/span>instances&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Mysql IS NULL判断&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">isnot&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">is_&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Mysql 联合主键&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">sqlalchemy&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">PrimaryKeyConstraint&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__table_args__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">PrimaryKeyConstraint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;pk1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;pk2&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Flask_sqlalchemy支持Double精度类型字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">sqlalchemy&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Column&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">sqlalchemy.dialects.mysql&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">DOUBLE&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">app&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">db&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Flask_sqlalchemy&lt;/span>
&lt;span class="n">double_column&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DOUBLE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">comment&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;双精度字段&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Sqlalchemy mysql double column&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>subquery使用实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">conditions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">material_period&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">and_&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">CraftEntityAttrs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">attr_number&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CraftEntityAttrs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">attr_value&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">conditions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">conditions&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CraftEntityAttrs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entity_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CraftEntityAttrs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cat_number&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">or_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">conditions&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">subquery&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">CraftEntityPeriodHours&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">proc_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">CraftEntityPeriodHours&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">period&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">CraftEntityPeriodHours&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hours&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">CraftEntityPeriodHours&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">major_wrapper_skill_level&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cat_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CraftEntityPeriodHours&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entity_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entity_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_seq&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">proc_number&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">in_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">constants&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">COIL_PROC_NUMBERS&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">distinct&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">subquery&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">stmt&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">and_&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_seq&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_seq&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PlanRow&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">PlanRow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RowProject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PlanRow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">project_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Order&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">order_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">with_entities&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">order_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;order_id&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">project_name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_project_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;project_id&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">purchase_unit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fac_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mat_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mat_desc&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">PlanRow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com_qty&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">PlanRow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plan_row_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_qty&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_seq&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">single_pack_cycle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">order_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_seq&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">project_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">outerjoin&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">ProducePlanCompletion&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plan_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ProducePlanCompletion&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plan_id&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">or_&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">ProducePlanCompletion&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">completion&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">ProducePlanCompletion&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">completion&lt;/span>
&lt;span class="o">==&lt;/span> &lt;span class="n">constants&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ProducePlanCompletion&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">not_scheduled&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">distinct&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">subquery&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">project_id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">ProduceUserPlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">project_id&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">in_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stmt&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">ProduceUserPlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">proc_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;design&amp;#39;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>Python安装</title><link>https://huangkai1008.github.io/p/python%E5%AE%89%E8%A3%85/</link><pubDate>Sun, 08 Jan 2017 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/python%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="python安装">Python安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Platform: centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Version: 3.7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装编译环境&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel libffi-devel
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>下载&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">wget --no-check-certificate https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建安装目录解压&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mkdir /usr/local/python3
tar -zxvf Python-3.7.4.tgz
&lt;span class="nb">cd&lt;/span> Python-3.7.4/
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>编译安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo ./configure --prefix&lt;span class="o">=&lt;/span>/usr/local/python3 &lt;span class="c1"># 指定创建的目录&lt;/span>
make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install &lt;span class="c1"># 编译安装&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="软链接">软链接&lt;/h2>
&lt;ul>
&lt;li>创建python和pip软链接
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">ln -s /usr/local/python3/bin/python3 /usr/bin/python3 &lt;span class="c1"># python3 软链接&lt;/span>
ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 &lt;span class="c1"># pip3软链接&lt;/span>
ln -s /usr/local/python3/bin/pipenv /usr/bin/pipenv &lt;span class="c1"># pipenv软链接&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="使用pyenv管理多个python版本">使用pyenv管理多个Python版本&lt;/h2>
&lt;h3 id="安装pyenv">安装pyenv&lt;/h3>
&lt;ul>
&lt;li>安装脚本
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">curl https://pyenv.run &lt;span class="p">|&lt;/span> bash
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>manjaro
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo pacman -S pyenv
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="pyenv基本使用">pyenv基本使用&lt;/h3>
&lt;ul>
&lt;li>展示可以安装的版本
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">pyenv install --list
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>安装python
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">pyenv install 3.7.4
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>manjaro如遇到ModuleNotFoundError: No module named &amp;lsquo;_ctypes&amp;rsquo;, 可执行&lt;code>sudo pacman -S pkgconf libffi&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>查看可使用的版本，带*表示当前使用的版本
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ pyenv versions
* system &lt;span class="o">(&lt;/span>&lt;span class="nb">set&lt;/span> by /home/huangkai/.pyenv/version&lt;span class="o">)&lt;/span>
3.7.4
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>配置及管理python版本
&lt;ul>
&lt;li>使用pyenv global &lt;!-- raw HTML omitted -->配置当前用户的系统使用的python版本&lt;/li>
&lt;li>使用pyenv shell &lt;!-- raw HTML omitted -->配置当前shell的python版本，退出shell则失效&lt;/li>
&lt;li>使用pyenv local &lt;!-- raw HTML omitted -->配置所在项目（目录）的python版本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>