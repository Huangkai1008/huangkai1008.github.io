<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机网络 on Huanghuang's Blog</title><link>https://huangkai1008.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link><description>Recent content in 计算机网络 on Huanghuang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 25 Jun 2020 22:20:45 +0800</lastBuildDate><atom:link href="https://huangkai1008.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>应用层</title><link>https://huangkai1008.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82/</link><pubDate>Thu, 25 Jun 2020 22:20:45 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82/</guid><description>应用层 一、概述 应用层包括大多数应用程序使用的协议，用于通过较低级别的协议建立的网络连接提供用户服务或交换应用程序数据。
网络应用程序体系结构 客户-服务器体系结构 存在总是打开的主机称为服务器（server），服务于其他来自客户（client）主机的请求，此种模式称为客户-服务器体系结构（client-server architecture）
特征 客户相互之间不直接通信 服务器具有固定的、周知的地址（IP 地址） 数据中心（data center） 用于扩展 示例 web 应用程序 P2P体系结构 以对等方式进行通信，并不区分客户端和服务端，而是平等关系进行通信。在对等方式下，可以把每个相连的主机当成既是服务端又是客户端，可以互相下载对方的共享文件。此种模式称为端到端体系结构（peer-to-peer architecture, P2P architecture）
特征 任意端系统直接通信 对等点从其他对等点请求服务，向其他对等点提供服务 自扩展性（self-scalability）：例如在 P2P 文件共享场景下，尽管每个对等方都由于请求文件产生工作负载，但每个对等方通过向其他对等方分发文件也为文件共享系统增加服务能力 示例 文件共享（BitTorrent） 对等方协助下载加速器（迅雷） 因特网电话和视频应用（Skype） 进程通信 在不同端系统上的进程（process），通过跨越计算机网络发送报文（message）
客户与服务器进程 在一对进程之间的通信会话场景中，发起通信（即在该会话开始时发起与其他进程的联系）的进程被标识为客户，在会话开始时等待被联系的进程是服务器进程
对于 web 而言，浏览器是一个客户进程，Web 服务器是一个服务器进程；
对于 P2P 文件共享，下载文件的对等方标识为客户，上载文件的对等方标识为服务器。
进程与计算机网络间的接口 进程通过套接字向网络发送报文和从网络接收报文。
套接字（socket） 是同一台主机内应用层与运输层之间的接口。由于该套接字是建立网络应用的可编程接口，因此套接字也称为应用程序和网络之间的应用程序编程接口（Application Programming Interface, API）
应用程序开发者可以控制套接字在应用层端的一切，但是对该套接字的运输层端控制仅限于：
选择运输层协议 设定运输层一些参数，比如最大缓存和最大报文段长度等 应用程序建立在选择的运输层协议提供的运输层服务之上。</description></item><item><title>IP</title><link>https://huangkai1008.github.io/p/ip/</link><pubDate>Thu, 18 Jun 2020 12:22:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/ip/</guid><description>IP IP地址概述 **IP 地址(Internet Protocol address)**是用于识别 IP 网络中的设备的一个唯一地址，32 个二进制位分成了 4 个八位组（1 个八位组 = 8 个二进制位）。
每个八位组转换成了十进制并由句点（点）分隔。 因此，可以说 IP 地址是用点分十进制格式表示的（例如，172.16.81.100）。 每个八位组值的范围从 0 到 255（十进制）或从 00000000 到 11111111（二进制）。
10. 1. 23. 19 (decimal) 00001010.00000001.00010111.00010011 (binary) IP 地址编址方式 IP 地址的编址方式经历了三个历史阶段：
分类 子网划分 无分类 1. 分类 IP地址由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的
网络号(net-id)：标志主机或路由器连接的网络，一个网络号在整个因特网内是唯一的
主机号(host-id)：标志该主机（或路由器）。一个主机号在它前面的网络号所指明的网络范围内必须是唯一的
简而言之，IP 地址 ::= {&amp;lt; 网络号 &amp;gt;, &amp;lt; 主机号 &amp;gt;}
根据 IP 地址的范围，由此便划分出A、B、C三类及特殊地址D、E：
类别 起始位 开始 结束 点分十进制掩码 A 0 0.</description></item><item><title>计算机网络</title><link>https://huangkai1008.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link><pubDate>Wed, 17 Jun 2020 11:22:54 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid><description>计算机网络 一、概述 互联网、因特网和万维网 互联网(internet)：凡是由能彼此通信的设备组成的网络就叫互联网，互联网把多种不同的网络连接起来，因此互联网是网络的网络
因特网(Internet)：世界范围的计算机网络（computer network）
万维网(World Wide Web, WWW)：万维网是互联网的主要服务，提供网页和音视频等服务
关系 互联网（广义）&amp;gt; 因特网 &amp;gt; 万维网
二、因特网 因特网包含了全世界数十亿计算设备，在今天，这些设备一般被称为主机（host） 或者端系统（end system），端系统通过通信链路（communication link） 和 分组交换机（packet switch） 连接到一起。
ISP 因特网服务提供商（Internet Service Provider, ISP），ISP 可以从互联网管理机构申请到很多 IP 地址，然后一些机构和个人从某个 ISP 获取 IP 地址的使用权，并可通过该 ISP 连接到互联网
例如中国移动、中国移动、中国电信就是有名的ISP
协议 协议（protocol） 定义了在两个或者多个通信实体之间交换的报文的格式和顺序，以及报文发送和/或接收一条报文或其他事件所采取的动作
接入网 三、电路交换与分组交换 通过网络链路和交换机移动数据有两种基本方法：电路交换（circult switching）和分组交换（packet switching）
电路交换（circuit switching） 电路交换需要建立一条专用的数据通信路径，这条路径上可能包含许多中间节点。这条通信路径在整个通信过程中将被独占，直到通信结束才会释放资源。电路交换适合实时性要求较高的大量数据传输的情况。
电路交换最显著的特点：独占资源，最典型的电路交换：传统电话网络
电路交换中的多路复用（multiplexing） 物理链路的通信能力远远大于一路通信所需要的能力，可以通过多路复用提高信道利用率，同时各个通信线路之间又互不影响
频分多路复用（Frequency-Division Multiplexing, FDM） 时分多路复用（Time-Division Multiplexing, TDM） 码分多路复用（Code-Division Multiplexing, CDM） 波分多路复用（Wavelength-Division Multiplexing, WDM） 优势 通信延时小。通信双方通过专用线路进行通信，数据可以直达。当数据传输量较大时，优点将十分显著 线路独占，没有冲突 实时性强。一旦通信线路，建立，双方可以实时通信 劣势 线路独占，利用率太低 连接建立时间过长 分组交换（packet switching） 分组 在网络应用中，端系统彼此交换报文（message）。</description></item><item><title>域名和DNS</title><link>https://huangkai1008.github.io/p/%E5%9F%9F%E5%90%8D%E5%92%8Cdns/</link><pubDate>Sun, 14 Jun 2020 16:02:15 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E5%9F%9F%E5%90%8D%E5%92%8Cdns/</guid><description>DNS 和域名 一、域名 网域名称（英语：Domain Name，简称：Domain），简称域名、网域，是由一串用点分隔的字符组成的互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。域名可以说是一个IP地址的代称，目的是为了便于记忆后者。
域名的层级 www.example.com 真正的域名是 www.example.com.root ，简写为 www.example.com. 。因为，根域名 .root 对于所有域名都是一样的，所以平时是省略的。
根域名的下一级，叫做顶级域名（top-level domain，缩写为TLD），比如 .com 、 .net ；再下一级叫做次级域名（second-level domain，缩写为SLD），比如 www.example.com 里面的 .example ，这一级域名是用户可以注册的；再下一级是主机名（host），比如www.example.com里面的www，又称为三级域名，这是用户在自己的域里面为服务器分配的名称，是用户可以任意分配的。
主机名.次级域名.顶级域名.根域名
host.sld.tld.root
二、DNS 域名系统（英语：Domain Name System，缩写：DNS）是一个分布式数据库，提供了域名和 IP地址之间相互转换的服务。
查询过程 DNS 服务器根据域名的层级，进行分级查询。
每一级域名都有自己的NS（Name Server） 记录，NS记录指向该级域名的域名服务器。这些服务器知道下一级域名的各种记录。
&amp;ldquo;分级查询&amp;rdquo;，就是从根域名开始，依次查询每一级域名的NS记录，直到查到最终的IP地址
过程大致为:
从&amp;quot;根域名服务器&amp;quot;查到&amp;quot;顶级域名服务器&amp;quot;的NS记录和A记录（IP地址） 从&amp;quot;顶级域名服务器&amp;quot;查到&amp;quot;次级域名服务器&amp;quot;的NS记录和A记录（IP地址） 从&amp;quot;次级域名服务器&amp;quot;查出&amp;quot;主机名&amp;quot;的IP地址 dig math.stackexchange.com ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.3-1ubuntu1.15-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; math.stackexchange.com ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 50719 ;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 65494 ;; QUESTION SECTION: ;math.</description></item><item><title>HTTP</title><link>https://huangkai1008.github.io/p/http/</link><pubDate>Fri, 12 Jun 2020 12:22:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/http/</guid><description>HTTP 一、概述 请求和响应报文 客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。
请求消息（requests） GET / HTTP/1.1 Host: developer.mozilla.org Accept-Language: fr 起始行（start line）：包含一个HTTP方法（method）、请求目标（request target） 和 HTTP 版本 （HTTP version）
消息头（headers）： 整个 header（包括其值）表现为单行形式
一个空行用来分隔首部和内容主体 Body
消息主体（body）
响应消息(responses) HTTP/1.1 200 OK Date: Sat, 09 Oct 2010 14:28:02 GMT Server: Apache Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT ETag: &amp;#34;51142bc1-7449-479b075b2891b&amp;#34; Accept-Ranges: bytes Content-Length: 29769 Content-Type: text/html &amp;lt;!DOCTYPE html... (here comes the 29769 bytes of the requested web page) 状态行（status line)： 协议版本，通常为 HTTP/1.</description></item></channel></rss>